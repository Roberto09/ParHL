Grammar:

Rule 0     S' -> globals
Rule 1     globals -> ignored_newlines globals_aux
Rule 2     globals_aux -> empty
Rule 3     globals_aux -> statements
Rule 4     globals_aux -> statement globals_aux
Rule 5     const -> STRING_V
Rule 6     const -> BOOL_V
Rule 7     const -> FLOAT_V
Rule 8     const -> INT_V
Rule 9     tens -> L_BRACKET expr tens_1
Rule 10    tens_1 -> COMMA expr tens_1
Rule 11    tens_1 -> R_BRACKET
Rule 12    tens_id -> ID tens_id_1
Rule 13    tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1
Rule 14    tens_id_1 -> L_BRACKET expr R_BRACKET
Rule 15    block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines
Rule 16    block_1 -> empty
Rule 17    block_1 -> statement block_1
Rule 18    const_type -> GPU_BOOL_T
Rule 19    const_type -> GPU_FLOAT_T
Rule 20    const_type -> GPU_INT_T
Rule 21    const_type -> BOOL_T
Rule 22    const_type -> STRING_T
Rule 23    const_type -> FLOAT_T
Rule 24    const_type -> INT_T
Rule 25    expr -> t_expr OR expr
Rule 26    expr -> t_expr
Rule 27    t_expr -> g_expr AND t_expr
Rule 28    t_expr -> g_expr
Rule 29    g_expr -> m_expr comparison m_expr
Rule 30    g_expr -> m_expr
Rule 31    comparison -> LEQT
Rule 32    comparison -> GEQT
Rule 33    comparison -> LT
Rule 34    comparison -> GT
Rule 35    comparison -> NOT_EQ
Rule 36    comparison -> EQ
Rule 37    m_expr -> term MINUS m_expr
Rule 38    m_expr -> term PLUS m_expr
Rule 39    m_expr -> term
Rule 40    term -> exp_factor MOD term
Rule 41    term -> exp_factor DIV term
Rule 42    term -> exp_factor MULT term
Rule 43    term -> exp_factor
Rule 44    exp_factor -> factor EXP exp_factor
Rule 45    exp_factor -> factor
Rule 46    factor -> MINUS factor_1
Rule 47    factor -> PLUS factor_1
Rule 48    factor -> NOT factor_1
Rule 49    factor -> factor_1
Rule 50    factor_1 -> ID
Rule 51    factor_1 -> tens_id
Rule 52    factor_1 -> tens
Rule 53    factor_1 -> func_call
Rule 54    factor_1 -> const
Rule 55    factor_1 -> L_PAREN expr R_PAREN
Rule 56    read_line -> READ_LINE L_PAREN R_PAREN
Rule 57    print_rule -> PRINT L_PAREN func_call_1
Rule 58    read_file -> READ_FILE L_PAREN R_PAREN
Rule 59    write_file -> WRITE_FILE L_PAREN func_call_1
Rule 60    func_call -> ID L_PAREN func_call_1
Rule 61    func_call_1 -> expr COMMA func_call_1
Rule 62    func_call_1 -> expr R_PAREN
Rule 63    func_call_1 -> R_PAREN
Rule 64    assign -> ID ASSIG expr
Rule 65    var -> LET var_1
Rule 66    var_1 -> var_2 COMMA var_1
Rule 67    var_1 -> var_2
Rule 68    var_2 -> var_3 ASSIG expr
Rule 69    var_2 -> var_3
Rule 70    var_3 -> var_id COLON const_type
Rule 71    var_id -> ID var_id_1
Rule 72    var_id -> ID
Rule 73    var_id_1 -> L_BRACKET INT_V R_BRACKET var_id_1
Rule 74    var_id_1 -> L_BRACKET INT_V R_BRACKET
Rule 75    while_loop -> WHILE L_PAREN expr R_PAREN block
Rule 76    for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block
Rule 77    cond -> cond_if_else_if
Rule 78    cond -> cond_if_else
Rule 79    cond -> simple_if
Rule 80    simple_if -> IF L_PAREN expr R_PAREN block
Rule 81    simple_else -> ELSE block
Rule 82    simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if
Rule 83    complex_else_if -> simple_else
Rule 84    complex_else_if -> empty
Rule 85    complex_else_if -> simple_else_if
Rule 86    cond_if_else -> simple_if simple_else
Rule 87    cond_if_else_if -> simple_if simple_else_if
Rule 88    func -> LET ID L_PAREN func_params R_PAREN COLON func_type block
Rule 89    func_params -> func_params_1
Rule 90    func_params -> empty
Rule 91    func_params_1 -> ID COLON const_type COMMA func_params_1
Rule 92    func_params_1 -> ID COLON const_type
Rule 93    func_type -> VOID
Rule 94    func_type -> const_type
Rule 95    ret -> RETURN expr
Rule 96    statement -> block_statements
Rule 97    statement -> statements eos
Rule 98    statements -> ret
Rule 99    statements -> func_call
Rule 100   statements -> write_file
Rule 101   statements -> read_file
Rule 102   statements -> print_rule
Rule 103   statements -> read_line
Rule 104   statements -> assign
Rule 105   statements -> var
Rule 106   block_statements -> func
Rule 107   block_statements -> cond
Rule 108   block_statements -> for_loop
Rule 109   block_statements -> while_loop
Rule 110   eos -> NEWLINE ignored_newlines
Rule 111   eos -> SEMICOLON ignored_newlines
Rule 112   ignored_newlines -> empty
Rule 113   ignored_newlines -> NEWLINE ignored_newlines
Rule 114   empty -> <empty>

Terminals, with rules where they appear:

AND                  : 27
ASSIG                : 64 68
BOOL_T               : 21
BOOL_V               : 6
COLON                : 70 88 91 92
COMMA                : 10 61 66 91
DIV                  : 41
ELSE                 : 81
ELSE_IF              : 82
EQ                   : 36
EXP                  : 44
FLOAT_T              : 23
FLOAT_V              : 7
FOR                  : 76
GEQT                 : 32
GPU_BOOL_T           : 18
GPU_FLOAT_T          : 19
GPU_INT_T            : 20
GT                   : 34
ID                   : 12 50 60 64 71 72 88 91 92
IF                   : 80
INT_T                : 24
INT_V                : 8 73 74
LEQT                 : 31
LET                  : 65 88
LT                   : 33
L_BRACE              : 15
L_BRACKET            : 9 13 14 73 74
L_PAREN              : 55 56 57 58 59 60 75 76 80 82 88
MINUS                : 37 46
MOD                  : 40
MULT                 : 42
NEWLINE              : 110 113
NOT                  : 48
NOT_EQ               : 35
OR                   : 25
PLUS                 : 38 47
PRINT                : 57
READ_FILE            : 58
READ_LINE            : 56
RETURN               : 95
R_BRACE              : 15
R_BRACKET            : 11 13 14 73 74
R_PAREN              : 55 56 58 62 63 75 76 80 82 88
SEMICOLON            : 76 76 111
STRING_T             : 22
STRING_V             : 5
VOID                 : 93
WHILE                : 75
WRITE_FILE           : 59
error                : 

Nonterminals, with rules where they appear:

assign               : 76 104
block                : 75 76 80 81 82 88
block_1              : 15 17
block_statements     : 96
comparison           : 29
complex_else_if      : 82
cond                 : 107
cond_if_else         : 78
cond_if_else_if      : 77
const                : 54
const_type           : 70 91 92 94
empty                : 2 16 84 90 112
eos                  : 97
exp_factor           : 40 41 42 43 44
expr                 : 9 10 13 14 25 55 61 62 64 68 75 76 80 82 95
factor               : 44 45
factor_1             : 46 47 48 49
for_loop             : 108
func                 : 106
func_call            : 53 99
func_call_1          : 57 59 60 61
func_params          : 88
func_params_1        : 89 91
func_type            : 88
g_expr               : 27 28
globals              : 0
globals_aux          : 1 4
ignored_newlines     : 1 15 15 15 110 111 113
m_expr               : 29 29 30 37 38
print_rule           : 102
read_file            : 101
read_line            : 103
ret                  : 98
simple_else          : 83 86
simple_else_if       : 85 87
simple_if            : 79 86 87
statement            : 4 17
statements           : 3 97
t_expr               : 25 26 27
tens                 : 52
tens_1               : 9 10
tens_id              : 51
tens_id_1            : 12 13
term                 : 37 38 39 40 41 42
var                  : 76 105
var_1                : 65 66
var_2                : 66 67
var_3                : 68 69
var_id               : 70
var_id_1             : 71 73
while_loop           : 109
write_file           : 100


state 0

    (0) S' -> . globals
    (1) globals -> . ignored_newlines globals_aux
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    RETURN          reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WRITE_FILE      reduce using rule 114 (empty -> .)
    READ_FILE       reduce using rule 114 (empty -> .)
    PRINT           reduce using rule 114 (empty -> .)
    READ_LINE       reduce using rule 114 (empty -> .)
    LET             reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    globals                        shift and go to state 1
    ignored_newlines               shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> globals .


state 2

    (1) globals -> ignored_newlines . globals_aux
    (2) globals_aux -> . empty
    (3) globals_aux -> . statements
    (4) globals_aux -> . statement globals_aux
    (114) empty -> .
    (98) statements -> . ret
    (99) statements -> . func_call
    (100) statements -> . write_file
    (101) statements -> . read_file
    (102) statements -> . print_rule
    (103) statements -> . read_line
    (104) statements -> . assign
    (105) statements -> . var
    (96) statement -> . block_statements
    (97) statement -> . statements eos
    (95) ret -> . RETURN expr
    (60) func_call -> . ID L_PAREN func_call_1
    (59) write_file -> . WRITE_FILE L_PAREN func_call_1
    (58) read_file -> . READ_FILE L_PAREN R_PAREN
    (57) print_rule -> . PRINT L_PAREN func_call_1
    (56) read_line -> . READ_LINE L_PAREN R_PAREN
    (64) assign -> . ID ASSIG expr
    (65) var -> . LET var_1
    (106) block_statements -> . func
    (107) block_statements -> . cond
    (108) block_statements -> . for_loop
    (109) block_statements -> . while_loop
    (88) func -> . LET ID L_PAREN func_params R_PAREN COLON func_type block
    (77) cond -> . cond_if_else_if
    (78) cond -> . cond_if_else
    (79) cond -> . simple_if
    (76) for_loop -> . FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block
    (75) while_loop -> . WHILE L_PAREN expr R_PAREN block
    (87) cond_if_else_if -> . simple_if simple_else_if
    (86) cond_if_else -> . simple_if simple_else
    (80) simple_if -> . IF L_PAREN expr R_PAREN block
    $end            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 18
    ID              shift and go to state 19
    WRITE_FILE      shift and go to state 20
    READ_FILE       shift and go to state 21
    PRINT           shift and go to state 22
    READ_LINE       shift and go to state 23
    LET             shift and go to state 24
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    IF              shift and go to state 34

    globals_aux                    shift and go to state 5
    empty                          shift and go to state 6
    statements                     shift and go to state 7
    statement                      shift and go to state 8
    ret                            shift and go to state 9
    func_call                      shift and go to state 10
    write_file                     shift and go to state 11
    read_file                      shift and go to state 12
    print_rule                     shift and go to state 13
    read_line                      shift and go to state 14
    assign                         shift and go to state 15
    var                            shift and go to state 16
    block_statements               shift and go to state 17
    func                           shift and go to state 25
    cond                           shift and go to state 26
    for_loop                       shift and go to state 27
    while_loop                     shift and go to state 28
    cond_if_else_if                shift and go to state 29
    cond_if_else                   shift and go to state 30
    simple_if                      shift and go to state 31

state 3

    (112) ignored_newlines -> empty .
    RETURN          reduce using rule 112 (ignored_newlines -> empty .)
    ID              reduce using rule 112 (ignored_newlines -> empty .)
    WRITE_FILE      reduce using rule 112 (ignored_newlines -> empty .)
    READ_FILE       reduce using rule 112 (ignored_newlines -> empty .)
    PRINT           reduce using rule 112 (ignored_newlines -> empty .)
    READ_LINE       reduce using rule 112 (ignored_newlines -> empty .)
    LET             reduce using rule 112 (ignored_newlines -> empty .)
    FOR             reduce using rule 112 (ignored_newlines -> empty .)
    WHILE           reduce using rule 112 (ignored_newlines -> empty .)
    IF              reduce using rule 112 (ignored_newlines -> empty .)
    $end            reduce using rule 112 (ignored_newlines -> empty .)
    R_BRACE         reduce using rule 112 (ignored_newlines -> empty .)
    L_BRACE         reduce using rule 112 (ignored_newlines -> empty .)
    ELSE_IF         reduce using rule 112 (ignored_newlines -> empty .)
    ELSE            reduce using rule 112 (ignored_newlines -> empty .)


state 4

    (113) ignored_newlines -> NEWLINE . ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    RETURN          reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WRITE_FILE      reduce using rule 114 (empty -> .)
    READ_FILE       reduce using rule 114 (empty -> .)
    PRINT           reduce using rule 114 (empty -> .)
    READ_LINE       reduce using rule 114 (empty -> .)
    LET             reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)
    R_BRACE         reduce using rule 114 (empty -> .)
    L_BRACE         reduce using rule 114 (empty -> .)
    ELSE_IF         reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)

    ignored_newlines               shift and go to state 35
    empty                          shift and go to state 3

state 5

    (1) globals -> ignored_newlines globals_aux .
    $end            reduce using rule 1 (globals -> ignored_newlines globals_aux .)


state 6

    (2) globals_aux -> empty .
    $end            reduce using rule 2 (globals_aux -> empty .)


state 7

    (3) globals_aux -> statements .
    (97) statement -> statements . eos
    (110) eos -> . NEWLINE ignored_newlines
    (111) eos -> . SEMICOLON ignored_newlines
    $end            reduce using rule 3 (globals_aux -> statements .)
    NEWLINE         shift and go to state 37
    SEMICOLON       shift and go to state 38

    eos                            shift and go to state 36

state 8

    (4) globals_aux -> statement . globals_aux
    (2) globals_aux -> . empty
    (3) globals_aux -> . statements
    (4) globals_aux -> . statement globals_aux
    (114) empty -> .
    (98) statements -> . ret
    (99) statements -> . func_call
    (100) statements -> . write_file
    (101) statements -> . read_file
    (102) statements -> . print_rule
    (103) statements -> . read_line
    (104) statements -> . assign
    (105) statements -> . var
    (96) statement -> . block_statements
    (97) statement -> . statements eos
    (95) ret -> . RETURN expr
    (60) func_call -> . ID L_PAREN func_call_1
    (59) write_file -> . WRITE_FILE L_PAREN func_call_1
    (58) read_file -> . READ_FILE L_PAREN R_PAREN
    (57) print_rule -> . PRINT L_PAREN func_call_1
    (56) read_line -> . READ_LINE L_PAREN R_PAREN
    (64) assign -> . ID ASSIG expr
    (65) var -> . LET var_1
    (106) block_statements -> . func
    (107) block_statements -> . cond
    (108) block_statements -> . for_loop
    (109) block_statements -> . while_loop
    (88) func -> . LET ID L_PAREN func_params R_PAREN COLON func_type block
    (77) cond -> . cond_if_else_if
    (78) cond -> . cond_if_else
    (79) cond -> . simple_if
    (76) for_loop -> . FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block
    (75) while_loop -> . WHILE L_PAREN expr R_PAREN block
    (87) cond_if_else_if -> . simple_if simple_else_if
    (86) cond_if_else -> . simple_if simple_else
    (80) simple_if -> . IF L_PAREN expr R_PAREN block
    $end            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 18
    ID              shift and go to state 19
    WRITE_FILE      shift and go to state 20
    READ_FILE       shift and go to state 21
    PRINT           shift and go to state 22
    READ_LINE       shift and go to state 23
    LET             shift and go to state 24
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    IF              shift and go to state 34

    statement                      shift and go to state 8
    globals_aux                    shift and go to state 39
    empty                          shift and go to state 6
    statements                     shift and go to state 7
    ret                            shift and go to state 9
    func_call                      shift and go to state 10
    write_file                     shift and go to state 11
    read_file                      shift and go to state 12
    print_rule                     shift and go to state 13
    read_line                      shift and go to state 14
    assign                         shift and go to state 15
    var                            shift and go to state 16
    block_statements               shift and go to state 17
    func                           shift and go to state 25
    cond                           shift and go to state 26
    for_loop                       shift and go to state 27
    while_loop                     shift and go to state 28
    cond_if_else_if                shift and go to state 29
    cond_if_else                   shift and go to state 30
    simple_if                      shift and go to state 31

state 9

    (98) statements -> ret .
    NEWLINE         reduce using rule 98 (statements -> ret .)
    SEMICOLON       reduce using rule 98 (statements -> ret .)
    $end            reduce using rule 98 (statements -> ret .)


state 10

    (99) statements -> func_call .
    NEWLINE         reduce using rule 99 (statements -> func_call .)
    SEMICOLON       reduce using rule 99 (statements -> func_call .)
    $end            reduce using rule 99 (statements -> func_call .)


state 11

    (100) statements -> write_file .
    NEWLINE         reduce using rule 100 (statements -> write_file .)
    SEMICOLON       reduce using rule 100 (statements -> write_file .)
    $end            reduce using rule 100 (statements -> write_file .)


state 12

    (101) statements -> read_file .
    NEWLINE         reduce using rule 101 (statements -> read_file .)
    SEMICOLON       reduce using rule 101 (statements -> read_file .)
    $end            reduce using rule 101 (statements -> read_file .)


state 13

    (102) statements -> print_rule .
    NEWLINE         reduce using rule 102 (statements -> print_rule .)
    SEMICOLON       reduce using rule 102 (statements -> print_rule .)
    $end            reduce using rule 102 (statements -> print_rule .)


state 14

    (103) statements -> read_line .
    NEWLINE         reduce using rule 103 (statements -> read_line .)
    SEMICOLON       reduce using rule 103 (statements -> read_line .)
    $end            reduce using rule 103 (statements -> read_line .)


state 15

    (104) statements -> assign .
    NEWLINE         reduce using rule 104 (statements -> assign .)
    SEMICOLON       reduce using rule 104 (statements -> assign .)
    $end            reduce using rule 104 (statements -> assign .)


state 16

    (105) statements -> var .
    NEWLINE         reduce using rule 105 (statements -> var .)
    SEMICOLON       reduce using rule 105 (statements -> var .)
    $end            reduce using rule 105 (statements -> var .)


state 17

    (96) statement -> block_statements .
    RETURN          reduce using rule 96 (statement -> block_statements .)
    ID              reduce using rule 96 (statement -> block_statements .)
    WRITE_FILE      reduce using rule 96 (statement -> block_statements .)
    READ_FILE       reduce using rule 96 (statement -> block_statements .)
    PRINT           reduce using rule 96 (statement -> block_statements .)
    READ_LINE       reduce using rule 96 (statement -> block_statements .)
    LET             reduce using rule 96 (statement -> block_statements .)
    FOR             reduce using rule 96 (statement -> block_statements .)
    WHILE           reduce using rule 96 (statement -> block_statements .)
    IF              reduce using rule 96 (statement -> block_statements .)
    $end            reduce using rule 96 (statement -> block_statements .)
    R_BRACE         reduce using rule 96 (statement -> block_statements .)


state 18

    (95) ret -> RETURN . expr
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 40
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 19

    (60) func_call -> ID . L_PAREN func_call_1
    (64) assign -> ID . ASSIG expr
    L_PAREN         shift and go to state 62
    ASSIG           shift and go to state 63


state 20

    (59) write_file -> WRITE_FILE . L_PAREN func_call_1
    L_PAREN         shift and go to state 64


state 21

    (58) read_file -> READ_FILE . L_PAREN R_PAREN
    L_PAREN         shift and go to state 65


state 22

    (57) print_rule -> PRINT . L_PAREN func_call_1
    L_PAREN         shift and go to state 66


state 23

    (56) read_line -> READ_LINE . L_PAREN R_PAREN
    L_PAREN         shift and go to state 67


state 24

    (65) var -> LET . var_1
    (88) func -> LET . ID L_PAREN func_params R_PAREN COLON func_type block
    (66) var_1 -> . var_2 COMMA var_1
    (67) var_1 -> . var_2
    (68) var_2 -> . var_3 ASSIG expr
    (69) var_2 -> . var_3
    (70) var_3 -> . var_id COLON const_type
    (71) var_id -> . ID var_id_1
    (72) var_id -> . ID
    ID              shift and go to state 69

    var_1                          shift and go to state 68
    var_2                          shift and go to state 70
    var_3                          shift and go to state 71
    var_id                         shift and go to state 72

state 25

    (106) block_statements -> func .
    RETURN          reduce using rule 106 (block_statements -> func .)
    ID              reduce using rule 106 (block_statements -> func .)
    WRITE_FILE      reduce using rule 106 (block_statements -> func .)
    READ_FILE       reduce using rule 106 (block_statements -> func .)
    PRINT           reduce using rule 106 (block_statements -> func .)
    READ_LINE       reduce using rule 106 (block_statements -> func .)
    LET             reduce using rule 106 (block_statements -> func .)
    FOR             reduce using rule 106 (block_statements -> func .)
    WHILE           reduce using rule 106 (block_statements -> func .)
    IF              reduce using rule 106 (block_statements -> func .)
    $end            reduce using rule 106 (block_statements -> func .)
    R_BRACE         reduce using rule 106 (block_statements -> func .)


state 26

    (107) block_statements -> cond .
    RETURN          reduce using rule 107 (block_statements -> cond .)
    ID              reduce using rule 107 (block_statements -> cond .)
    WRITE_FILE      reduce using rule 107 (block_statements -> cond .)
    READ_FILE       reduce using rule 107 (block_statements -> cond .)
    PRINT           reduce using rule 107 (block_statements -> cond .)
    READ_LINE       reduce using rule 107 (block_statements -> cond .)
    LET             reduce using rule 107 (block_statements -> cond .)
    FOR             reduce using rule 107 (block_statements -> cond .)
    WHILE           reduce using rule 107 (block_statements -> cond .)
    IF              reduce using rule 107 (block_statements -> cond .)
    $end            reduce using rule 107 (block_statements -> cond .)
    R_BRACE         reduce using rule 107 (block_statements -> cond .)


state 27

    (108) block_statements -> for_loop .
    RETURN          reduce using rule 108 (block_statements -> for_loop .)
    ID              reduce using rule 108 (block_statements -> for_loop .)
    WRITE_FILE      reduce using rule 108 (block_statements -> for_loop .)
    READ_FILE       reduce using rule 108 (block_statements -> for_loop .)
    PRINT           reduce using rule 108 (block_statements -> for_loop .)
    READ_LINE       reduce using rule 108 (block_statements -> for_loop .)
    LET             reduce using rule 108 (block_statements -> for_loop .)
    FOR             reduce using rule 108 (block_statements -> for_loop .)
    WHILE           reduce using rule 108 (block_statements -> for_loop .)
    IF              reduce using rule 108 (block_statements -> for_loop .)
    $end            reduce using rule 108 (block_statements -> for_loop .)
    R_BRACE         reduce using rule 108 (block_statements -> for_loop .)


state 28

    (109) block_statements -> while_loop .
    RETURN          reduce using rule 109 (block_statements -> while_loop .)
    ID              reduce using rule 109 (block_statements -> while_loop .)
    WRITE_FILE      reduce using rule 109 (block_statements -> while_loop .)
    READ_FILE       reduce using rule 109 (block_statements -> while_loop .)
    PRINT           reduce using rule 109 (block_statements -> while_loop .)
    READ_LINE       reduce using rule 109 (block_statements -> while_loop .)
    LET             reduce using rule 109 (block_statements -> while_loop .)
    FOR             reduce using rule 109 (block_statements -> while_loop .)
    WHILE           reduce using rule 109 (block_statements -> while_loop .)
    IF              reduce using rule 109 (block_statements -> while_loop .)
    $end            reduce using rule 109 (block_statements -> while_loop .)
    R_BRACE         reduce using rule 109 (block_statements -> while_loop .)


state 29

    (77) cond -> cond_if_else_if .
    RETURN          reduce using rule 77 (cond -> cond_if_else_if .)
    ID              reduce using rule 77 (cond -> cond_if_else_if .)
    WRITE_FILE      reduce using rule 77 (cond -> cond_if_else_if .)
    READ_FILE       reduce using rule 77 (cond -> cond_if_else_if .)
    PRINT           reduce using rule 77 (cond -> cond_if_else_if .)
    READ_LINE       reduce using rule 77 (cond -> cond_if_else_if .)
    LET             reduce using rule 77 (cond -> cond_if_else_if .)
    FOR             reduce using rule 77 (cond -> cond_if_else_if .)
    WHILE           reduce using rule 77 (cond -> cond_if_else_if .)
    IF              reduce using rule 77 (cond -> cond_if_else_if .)
    $end            reduce using rule 77 (cond -> cond_if_else_if .)
    R_BRACE         reduce using rule 77 (cond -> cond_if_else_if .)


state 30

    (78) cond -> cond_if_else .
    RETURN          reduce using rule 78 (cond -> cond_if_else .)
    ID              reduce using rule 78 (cond -> cond_if_else .)
    WRITE_FILE      reduce using rule 78 (cond -> cond_if_else .)
    READ_FILE       reduce using rule 78 (cond -> cond_if_else .)
    PRINT           reduce using rule 78 (cond -> cond_if_else .)
    READ_LINE       reduce using rule 78 (cond -> cond_if_else .)
    LET             reduce using rule 78 (cond -> cond_if_else .)
    FOR             reduce using rule 78 (cond -> cond_if_else .)
    WHILE           reduce using rule 78 (cond -> cond_if_else .)
    IF              reduce using rule 78 (cond -> cond_if_else .)
    $end            reduce using rule 78 (cond -> cond_if_else .)
    R_BRACE         reduce using rule 78 (cond -> cond_if_else .)


state 31

    (79) cond -> simple_if .
    (87) cond_if_else_if -> simple_if . simple_else_if
    (86) cond_if_else -> simple_if . simple_else
    (82) simple_else_if -> . ELSE_IF L_PAREN expr R_PAREN block complex_else_if
    (81) simple_else -> . ELSE block
    RETURN          reduce using rule 79 (cond -> simple_if .)
    ID              reduce using rule 79 (cond -> simple_if .)
    WRITE_FILE      reduce using rule 79 (cond -> simple_if .)
    READ_FILE       reduce using rule 79 (cond -> simple_if .)
    PRINT           reduce using rule 79 (cond -> simple_if .)
    READ_LINE       reduce using rule 79 (cond -> simple_if .)
    LET             reduce using rule 79 (cond -> simple_if .)
    FOR             reduce using rule 79 (cond -> simple_if .)
    WHILE           reduce using rule 79 (cond -> simple_if .)
    IF              reduce using rule 79 (cond -> simple_if .)
    $end            reduce using rule 79 (cond -> simple_if .)
    R_BRACE         reduce using rule 79 (cond -> simple_if .)
    ELSE_IF         shift and go to state 75
    ELSE            shift and go to state 76

    simple_else_if                 shift and go to state 73
    simple_else                    shift and go to state 74

state 32

    (76) for_loop -> FOR . L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block
    L_PAREN         shift and go to state 77


state 33

    (75) while_loop -> WHILE . L_PAREN expr R_PAREN block
    L_PAREN         shift and go to state 78


state 34

    (80) simple_if -> IF . L_PAREN expr R_PAREN block
    L_PAREN         shift and go to state 79


state 35

    (113) ignored_newlines -> NEWLINE ignored_newlines .
    RETURN          reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    ID              reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    WRITE_FILE      reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    READ_FILE       reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    PRINT           reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    READ_LINE       reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    LET             reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    FOR             reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    WHILE           reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    IF              reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    $end            reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    R_BRACE         reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    L_BRACE         reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    ELSE_IF         reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)
    ELSE            reduce using rule 113 (ignored_newlines -> NEWLINE ignored_newlines .)


state 36

    (97) statement -> statements eos .
    RETURN          reduce using rule 97 (statement -> statements eos .)
    ID              reduce using rule 97 (statement -> statements eos .)
    WRITE_FILE      reduce using rule 97 (statement -> statements eos .)
    READ_FILE       reduce using rule 97 (statement -> statements eos .)
    PRINT           reduce using rule 97 (statement -> statements eos .)
    READ_LINE       reduce using rule 97 (statement -> statements eos .)
    LET             reduce using rule 97 (statement -> statements eos .)
    FOR             reduce using rule 97 (statement -> statements eos .)
    WHILE           reduce using rule 97 (statement -> statements eos .)
    IF              reduce using rule 97 (statement -> statements eos .)
    $end            reduce using rule 97 (statement -> statements eos .)
    R_BRACE         reduce using rule 97 (statement -> statements eos .)


state 37

    (110) eos -> NEWLINE . ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    RETURN          reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WRITE_FILE      reduce using rule 114 (empty -> .)
    READ_FILE       reduce using rule 114 (empty -> .)
    PRINT           reduce using rule 114 (empty -> .)
    READ_LINE       reduce using rule 114 (empty -> .)
    LET             reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)
    R_BRACE         reduce using rule 114 (empty -> .)

    ignored_newlines               shift and go to state 80
    empty                          shift and go to state 3

state 38

    (111) eos -> SEMICOLON . ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    RETURN          reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WRITE_FILE      reduce using rule 114 (empty -> .)
    READ_FILE       reduce using rule 114 (empty -> .)
    PRINT           reduce using rule 114 (empty -> .)
    READ_LINE       reduce using rule 114 (empty -> .)
    LET             reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)
    R_BRACE         reduce using rule 114 (empty -> .)

    ignored_newlines               shift and go to state 81
    empty                          shift and go to state 3

state 39

    (4) globals_aux -> statement globals_aux .
    $end            reduce using rule 4 (globals_aux -> statement globals_aux .)


state 40

    (95) ret -> RETURN expr .
    NEWLINE         reduce using rule 95 (ret -> RETURN expr .)
    SEMICOLON       reduce using rule 95 (ret -> RETURN expr .)
    $end            reduce using rule 95 (ret -> RETURN expr .)


state 41

    (25) expr -> t_expr . OR expr
    (26) expr -> t_expr .
    OR              shift and go to state 82
    NEWLINE         reduce using rule 26 (expr -> t_expr .)
    SEMICOLON       reduce using rule 26 (expr -> t_expr .)
    $end            reduce using rule 26 (expr -> t_expr .)
    R_PAREN         reduce using rule 26 (expr -> t_expr .)
    COMMA           reduce using rule 26 (expr -> t_expr .)
    R_BRACKET       reduce using rule 26 (expr -> t_expr .)


state 42

    (27) t_expr -> g_expr . AND t_expr
    (28) t_expr -> g_expr .
    AND             shift and go to state 83
    OR              reduce using rule 28 (t_expr -> g_expr .)
    NEWLINE         reduce using rule 28 (t_expr -> g_expr .)
    SEMICOLON       reduce using rule 28 (t_expr -> g_expr .)
    $end            reduce using rule 28 (t_expr -> g_expr .)
    R_PAREN         reduce using rule 28 (t_expr -> g_expr .)
    COMMA           reduce using rule 28 (t_expr -> g_expr .)
    R_BRACKET       reduce using rule 28 (t_expr -> g_expr .)


state 43

    (29) g_expr -> m_expr . comparison m_expr
    (30) g_expr -> m_expr .
    (31) comparison -> . LEQT
    (32) comparison -> . GEQT
    (33) comparison -> . LT
    (34) comparison -> . GT
    (35) comparison -> . NOT_EQ
    (36) comparison -> . EQ
    AND             reduce using rule 30 (g_expr -> m_expr .)
    OR              reduce using rule 30 (g_expr -> m_expr .)
    NEWLINE         reduce using rule 30 (g_expr -> m_expr .)
    SEMICOLON       reduce using rule 30 (g_expr -> m_expr .)
    $end            reduce using rule 30 (g_expr -> m_expr .)
    R_PAREN         reduce using rule 30 (g_expr -> m_expr .)
    COMMA           reduce using rule 30 (g_expr -> m_expr .)
    R_BRACKET       reduce using rule 30 (g_expr -> m_expr .)
    LEQT            shift and go to state 85
    GEQT            shift and go to state 86
    LT              shift and go to state 87
    GT              shift and go to state 88
    NOT_EQ          shift and go to state 89
    EQ              shift and go to state 90

    comparison                     shift and go to state 84

state 44

    (37) m_expr -> term . MINUS m_expr
    (38) m_expr -> term . PLUS m_expr
    (39) m_expr -> term .
    MINUS           shift and go to state 91
    PLUS            shift and go to state 92
    LEQT            reduce using rule 39 (m_expr -> term .)
    GEQT            reduce using rule 39 (m_expr -> term .)
    LT              reduce using rule 39 (m_expr -> term .)
    GT              reduce using rule 39 (m_expr -> term .)
    NOT_EQ          reduce using rule 39 (m_expr -> term .)
    EQ              reduce using rule 39 (m_expr -> term .)
    AND             reduce using rule 39 (m_expr -> term .)
    OR              reduce using rule 39 (m_expr -> term .)
    NEWLINE         reduce using rule 39 (m_expr -> term .)
    SEMICOLON       reduce using rule 39 (m_expr -> term .)
    $end            reduce using rule 39 (m_expr -> term .)
    R_PAREN         reduce using rule 39 (m_expr -> term .)
    COMMA           reduce using rule 39 (m_expr -> term .)
    R_BRACKET       reduce using rule 39 (m_expr -> term .)


state 45

    (46) factor -> MINUS . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    factor_1                       shift and go to state 93
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 46

    (47) factor -> PLUS . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    factor_1                       shift and go to state 94
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 47

    (40) term -> exp_factor . MOD term
    (41) term -> exp_factor . DIV term
    (42) term -> exp_factor . MULT term
    (43) term -> exp_factor .
    MOD             shift and go to state 95
    DIV             shift and go to state 96
    MULT            shift and go to state 97
    MINUS           reduce using rule 43 (term -> exp_factor .)
    PLUS            reduce using rule 43 (term -> exp_factor .)
    LEQT            reduce using rule 43 (term -> exp_factor .)
    GEQT            reduce using rule 43 (term -> exp_factor .)
    LT              reduce using rule 43 (term -> exp_factor .)
    GT              reduce using rule 43 (term -> exp_factor .)
    NOT_EQ          reduce using rule 43 (term -> exp_factor .)
    EQ              reduce using rule 43 (term -> exp_factor .)
    AND             reduce using rule 43 (term -> exp_factor .)
    OR              reduce using rule 43 (term -> exp_factor .)
    NEWLINE         reduce using rule 43 (term -> exp_factor .)
    SEMICOLON       reduce using rule 43 (term -> exp_factor .)
    $end            reduce using rule 43 (term -> exp_factor .)
    R_PAREN         reduce using rule 43 (term -> exp_factor .)
    COMMA           reduce using rule 43 (term -> exp_factor .)
    R_BRACKET       reduce using rule 43 (term -> exp_factor .)


state 48

    (44) exp_factor -> factor . EXP exp_factor
    (45) exp_factor -> factor .
    EXP             shift and go to state 98
    MOD             reduce using rule 45 (exp_factor -> factor .)
    DIV             reduce using rule 45 (exp_factor -> factor .)
    MULT            reduce using rule 45 (exp_factor -> factor .)
    MINUS           reduce using rule 45 (exp_factor -> factor .)
    PLUS            reduce using rule 45 (exp_factor -> factor .)
    LEQT            reduce using rule 45 (exp_factor -> factor .)
    GEQT            reduce using rule 45 (exp_factor -> factor .)
    LT              reduce using rule 45 (exp_factor -> factor .)
    GT              reduce using rule 45 (exp_factor -> factor .)
    NOT_EQ          reduce using rule 45 (exp_factor -> factor .)
    EQ              reduce using rule 45 (exp_factor -> factor .)
    AND             reduce using rule 45 (exp_factor -> factor .)
    OR              reduce using rule 45 (exp_factor -> factor .)
    NEWLINE         reduce using rule 45 (exp_factor -> factor .)
    SEMICOLON       reduce using rule 45 (exp_factor -> factor .)
    $end            reduce using rule 45 (exp_factor -> factor .)
    R_PAREN         reduce using rule 45 (exp_factor -> factor .)
    COMMA           reduce using rule 45 (exp_factor -> factor .)
    R_BRACKET       reduce using rule 45 (exp_factor -> factor .)


state 49

    (49) factor -> factor_1 .
    EXP             reduce using rule 49 (factor -> factor_1 .)
    MOD             reduce using rule 49 (factor -> factor_1 .)
    DIV             reduce using rule 49 (factor -> factor_1 .)
    MULT            reduce using rule 49 (factor -> factor_1 .)
    MINUS           reduce using rule 49 (factor -> factor_1 .)
    PLUS            reduce using rule 49 (factor -> factor_1 .)
    LEQT            reduce using rule 49 (factor -> factor_1 .)
    GEQT            reduce using rule 49 (factor -> factor_1 .)
    LT              reduce using rule 49 (factor -> factor_1 .)
    GT              reduce using rule 49 (factor -> factor_1 .)
    NOT_EQ          reduce using rule 49 (factor -> factor_1 .)
    EQ              reduce using rule 49 (factor -> factor_1 .)
    AND             reduce using rule 49 (factor -> factor_1 .)
    OR              reduce using rule 49 (factor -> factor_1 .)
    NEWLINE         reduce using rule 49 (factor -> factor_1 .)
    SEMICOLON       reduce using rule 49 (factor -> factor_1 .)
    $end            reduce using rule 49 (factor -> factor_1 .)
    R_PAREN         reduce using rule 49 (factor -> factor_1 .)
    COMMA           reduce using rule 49 (factor -> factor_1 .)
    R_BRACKET       reduce using rule 49 (factor -> factor_1 .)


state 50

    (48) factor -> NOT . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    factor_1                       shift and go to state 99
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 51

    (50) factor_1 -> ID .
    (12) tens_id -> ID . tens_id_1
    (60) func_call -> ID . L_PAREN func_call_1
    (13) tens_id_1 -> . L_BRACKET expr R_BRACKET tens_id_1
    (14) tens_id_1 -> . L_BRACKET expr R_BRACKET
    EXP             reduce using rule 50 (factor_1 -> ID .)
    MOD             reduce using rule 50 (factor_1 -> ID .)
    DIV             reduce using rule 50 (factor_1 -> ID .)
    MULT            reduce using rule 50 (factor_1 -> ID .)
    MINUS           reduce using rule 50 (factor_1 -> ID .)
    PLUS            reduce using rule 50 (factor_1 -> ID .)
    LEQT            reduce using rule 50 (factor_1 -> ID .)
    GEQT            reduce using rule 50 (factor_1 -> ID .)
    LT              reduce using rule 50 (factor_1 -> ID .)
    GT              reduce using rule 50 (factor_1 -> ID .)
    NOT_EQ          reduce using rule 50 (factor_1 -> ID .)
    EQ              reduce using rule 50 (factor_1 -> ID .)
    AND             reduce using rule 50 (factor_1 -> ID .)
    OR              reduce using rule 50 (factor_1 -> ID .)
    NEWLINE         reduce using rule 50 (factor_1 -> ID .)
    SEMICOLON       reduce using rule 50 (factor_1 -> ID .)
    $end            reduce using rule 50 (factor_1 -> ID .)
    R_PAREN         reduce using rule 50 (factor_1 -> ID .)
    COMMA           reduce using rule 50 (factor_1 -> ID .)
    R_BRACKET       reduce using rule 50 (factor_1 -> ID .)
    L_PAREN         shift and go to state 62
    L_BRACKET       shift and go to state 101

    tens_id_1                      shift and go to state 100

state 52

    (51) factor_1 -> tens_id .
    EXP             reduce using rule 51 (factor_1 -> tens_id .)
    MOD             reduce using rule 51 (factor_1 -> tens_id .)
    DIV             reduce using rule 51 (factor_1 -> tens_id .)
    MULT            reduce using rule 51 (factor_1 -> tens_id .)
    MINUS           reduce using rule 51 (factor_1 -> tens_id .)
    PLUS            reduce using rule 51 (factor_1 -> tens_id .)
    LEQT            reduce using rule 51 (factor_1 -> tens_id .)
    GEQT            reduce using rule 51 (factor_1 -> tens_id .)
    LT              reduce using rule 51 (factor_1 -> tens_id .)
    GT              reduce using rule 51 (factor_1 -> tens_id .)
    NOT_EQ          reduce using rule 51 (factor_1 -> tens_id .)
    EQ              reduce using rule 51 (factor_1 -> tens_id .)
    AND             reduce using rule 51 (factor_1 -> tens_id .)
    OR              reduce using rule 51 (factor_1 -> tens_id .)
    NEWLINE         reduce using rule 51 (factor_1 -> tens_id .)
    SEMICOLON       reduce using rule 51 (factor_1 -> tens_id .)
    $end            reduce using rule 51 (factor_1 -> tens_id .)
    R_PAREN         reduce using rule 51 (factor_1 -> tens_id .)
    COMMA           reduce using rule 51 (factor_1 -> tens_id .)
    R_BRACKET       reduce using rule 51 (factor_1 -> tens_id .)


state 53

    (52) factor_1 -> tens .
    EXP             reduce using rule 52 (factor_1 -> tens .)
    MOD             reduce using rule 52 (factor_1 -> tens .)
    DIV             reduce using rule 52 (factor_1 -> tens .)
    MULT            reduce using rule 52 (factor_1 -> tens .)
    MINUS           reduce using rule 52 (factor_1 -> tens .)
    PLUS            reduce using rule 52 (factor_1 -> tens .)
    LEQT            reduce using rule 52 (factor_1 -> tens .)
    GEQT            reduce using rule 52 (factor_1 -> tens .)
    LT              reduce using rule 52 (factor_1 -> tens .)
    GT              reduce using rule 52 (factor_1 -> tens .)
    NOT_EQ          reduce using rule 52 (factor_1 -> tens .)
    EQ              reduce using rule 52 (factor_1 -> tens .)
    AND             reduce using rule 52 (factor_1 -> tens .)
    OR              reduce using rule 52 (factor_1 -> tens .)
    NEWLINE         reduce using rule 52 (factor_1 -> tens .)
    SEMICOLON       reduce using rule 52 (factor_1 -> tens .)
    $end            reduce using rule 52 (factor_1 -> tens .)
    R_PAREN         reduce using rule 52 (factor_1 -> tens .)
    COMMA           reduce using rule 52 (factor_1 -> tens .)
    R_BRACKET       reduce using rule 52 (factor_1 -> tens .)


state 54

    (53) factor_1 -> func_call .
    EXP             reduce using rule 53 (factor_1 -> func_call .)
    MOD             reduce using rule 53 (factor_1 -> func_call .)
    DIV             reduce using rule 53 (factor_1 -> func_call .)
    MULT            reduce using rule 53 (factor_1 -> func_call .)
    MINUS           reduce using rule 53 (factor_1 -> func_call .)
    PLUS            reduce using rule 53 (factor_1 -> func_call .)
    LEQT            reduce using rule 53 (factor_1 -> func_call .)
    GEQT            reduce using rule 53 (factor_1 -> func_call .)
    LT              reduce using rule 53 (factor_1 -> func_call .)
    GT              reduce using rule 53 (factor_1 -> func_call .)
    NOT_EQ          reduce using rule 53 (factor_1 -> func_call .)
    EQ              reduce using rule 53 (factor_1 -> func_call .)
    AND             reduce using rule 53 (factor_1 -> func_call .)
    OR              reduce using rule 53 (factor_1 -> func_call .)
    NEWLINE         reduce using rule 53 (factor_1 -> func_call .)
    SEMICOLON       reduce using rule 53 (factor_1 -> func_call .)
    $end            reduce using rule 53 (factor_1 -> func_call .)
    R_PAREN         reduce using rule 53 (factor_1 -> func_call .)
    COMMA           reduce using rule 53 (factor_1 -> func_call .)
    R_BRACKET       reduce using rule 53 (factor_1 -> func_call .)


state 55

    (54) factor_1 -> const .
    EXP             reduce using rule 54 (factor_1 -> const .)
    MOD             reduce using rule 54 (factor_1 -> const .)
    DIV             reduce using rule 54 (factor_1 -> const .)
    MULT            reduce using rule 54 (factor_1 -> const .)
    MINUS           reduce using rule 54 (factor_1 -> const .)
    PLUS            reduce using rule 54 (factor_1 -> const .)
    LEQT            reduce using rule 54 (factor_1 -> const .)
    GEQT            reduce using rule 54 (factor_1 -> const .)
    LT              reduce using rule 54 (factor_1 -> const .)
    GT              reduce using rule 54 (factor_1 -> const .)
    NOT_EQ          reduce using rule 54 (factor_1 -> const .)
    EQ              reduce using rule 54 (factor_1 -> const .)
    AND             reduce using rule 54 (factor_1 -> const .)
    OR              reduce using rule 54 (factor_1 -> const .)
    NEWLINE         reduce using rule 54 (factor_1 -> const .)
    SEMICOLON       reduce using rule 54 (factor_1 -> const .)
    $end            reduce using rule 54 (factor_1 -> const .)
    R_PAREN         reduce using rule 54 (factor_1 -> const .)
    COMMA           reduce using rule 54 (factor_1 -> const .)
    R_BRACKET       reduce using rule 54 (factor_1 -> const .)


state 56

    (55) factor_1 -> L_PAREN . expr R_PAREN
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 102
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 57

    (9) tens -> L_BRACKET . expr tens_1
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 103
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 58

    (5) const -> STRING_V .
    EXP             reduce using rule 5 (const -> STRING_V .)
    MOD             reduce using rule 5 (const -> STRING_V .)
    DIV             reduce using rule 5 (const -> STRING_V .)
    MULT            reduce using rule 5 (const -> STRING_V .)
    MINUS           reduce using rule 5 (const -> STRING_V .)
    PLUS            reduce using rule 5 (const -> STRING_V .)
    LEQT            reduce using rule 5 (const -> STRING_V .)
    GEQT            reduce using rule 5 (const -> STRING_V .)
    LT              reduce using rule 5 (const -> STRING_V .)
    GT              reduce using rule 5 (const -> STRING_V .)
    NOT_EQ          reduce using rule 5 (const -> STRING_V .)
    EQ              reduce using rule 5 (const -> STRING_V .)
    AND             reduce using rule 5 (const -> STRING_V .)
    OR              reduce using rule 5 (const -> STRING_V .)
    NEWLINE         reduce using rule 5 (const -> STRING_V .)
    SEMICOLON       reduce using rule 5 (const -> STRING_V .)
    $end            reduce using rule 5 (const -> STRING_V .)
    R_PAREN         reduce using rule 5 (const -> STRING_V .)
    COMMA           reduce using rule 5 (const -> STRING_V .)
    R_BRACKET       reduce using rule 5 (const -> STRING_V .)


state 59

    (6) const -> BOOL_V .
    EXP             reduce using rule 6 (const -> BOOL_V .)
    MOD             reduce using rule 6 (const -> BOOL_V .)
    DIV             reduce using rule 6 (const -> BOOL_V .)
    MULT            reduce using rule 6 (const -> BOOL_V .)
    MINUS           reduce using rule 6 (const -> BOOL_V .)
    PLUS            reduce using rule 6 (const -> BOOL_V .)
    LEQT            reduce using rule 6 (const -> BOOL_V .)
    GEQT            reduce using rule 6 (const -> BOOL_V .)
    LT              reduce using rule 6 (const -> BOOL_V .)
    GT              reduce using rule 6 (const -> BOOL_V .)
    NOT_EQ          reduce using rule 6 (const -> BOOL_V .)
    EQ              reduce using rule 6 (const -> BOOL_V .)
    AND             reduce using rule 6 (const -> BOOL_V .)
    OR              reduce using rule 6 (const -> BOOL_V .)
    NEWLINE         reduce using rule 6 (const -> BOOL_V .)
    SEMICOLON       reduce using rule 6 (const -> BOOL_V .)
    $end            reduce using rule 6 (const -> BOOL_V .)
    R_PAREN         reduce using rule 6 (const -> BOOL_V .)
    COMMA           reduce using rule 6 (const -> BOOL_V .)
    R_BRACKET       reduce using rule 6 (const -> BOOL_V .)


state 60

    (7) const -> FLOAT_V .
    EXP             reduce using rule 7 (const -> FLOAT_V .)
    MOD             reduce using rule 7 (const -> FLOAT_V .)
    DIV             reduce using rule 7 (const -> FLOAT_V .)
    MULT            reduce using rule 7 (const -> FLOAT_V .)
    MINUS           reduce using rule 7 (const -> FLOAT_V .)
    PLUS            reduce using rule 7 (const -> FLOAT_V .)
    LEQT            reduce using rule 7 (const -> FLOAT_V .)
    GEQT            reduce using rule 7 (const -> FLOAT_V .)
    LT              reduce using rule 7 (const -> FLOAT_V .)
    GT              reduce using rule 7 (const -> FLOAT_V .)
    NOT_EQ          reduce using rule 7 (const -> FLOAT_V .)
    EQ              reduce using rule 7 (const -> FLOAT_V .)
    AND             reduce using rule 7 (const -> FLOAT_V .)
    OR              reduce using rule 7 (const -> FLOAT_V .)
    NEWLINE         reduce using rule 7 (const -> FLOAT_V .)
    SEMICOLON       reduce using rule 7 (const -> FLOAT_V .)
    $end            reduce using rule 7 (const -> FLOAT_V .)
    R_PAREN         reduce using rule 7 (const -> FLOAT_V .)
    COMMA           reduce using rule 7 (const -> FLOAT_V .)
    R_BRACKET       reduce using rule 7 (const -> FLOAT_V .)


state 61

    (8) const -> INT_V .
    EXP             reduce using rule 8 (const -> INT_V .)
    MOD             reduce using rule 8 (const -> INT_V .)
    DIV             reduce using rule 8 (const -> INT_V .)
    MULT            reduce using rule 8 (const -> INT_V .)
    MINUS           reduce using rule 8 (const -> INT_V .)
    PLUS            reduce using rule 8 (const -> INT_V .)
    LEQT            reduce using rule 8 (const -> INT_V .)
    GEQT            reduce using rule 8 (const -> INT_V .)
    LT              reduce using rule 8 (const -> INT_V .)
    GT              reduce using rule 8 (const -> INT_V .)
    NOT_EQ          reduce using rule 8 (const -> INT_V .)
    EQ              reduce using rule 8 (const -> INT_V .)
    AND             reduce using rule 8 (const -> INT_V .)
    OR              reduce using rule 8 (const -> INT_V .)
    NEWLINE         reduce using rule 8 (const -> INT_V .)
    SEMICOLON       reduce using rule 8 (const -> INT_V .)
    $end            reduce using rule 8 (const -> INT_V .)
    R_PAREN         reduce using rule 8 (const -> INT_V .)
    COMMA           reduce using rule 8 (const -> INT_V .)
    R_BRACKET       reduce using rule 8 (const -> INT_V .)


state 62

    (60) func_call -> ID L_PAREN . func_call_1
    (61) func_call_1 -> . expr COMMA func_call_1
    (62) func_call_1 -> . expr R_PAREN
    (63) func_call_1 -> . R_PAREN
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    R_PAREN         shift and go to state 106
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    func_call_1                    shift and go to state 104
    expr                           shift and go to state 105
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 63

    (64) assign -> ID ASSIG . expr
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 107
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 64

    (59) write_file -> WRITE_FILE L_PAREN . func_call_1
    (61) func_call_1 -> . expr COMMA func_call_1
    (62) func_call_1 -> . expr R_PAREN
    (63) func_call_1 -> . R_PAREN
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    R_PAREN         shift and go to state 106
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    func_call_1                    shift and go to state 108
    expr                           shift and go to state 105
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 65

    (58) read_file -> READ_FILE L_PAREN . R_PAREN
    R_PAREN         shift and go to state 109


state 66

    (57) print_rule -> PRINT L_PAREN . func_call_1
    (61) func_call_1 -> . expr COMMA func_call_1
    (62) func_call_1 -> . expr R_PAREN
    (63) func_call_1 -> . R_PAREN
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    R_PAREN         shift and go to state 106
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    func_call_1                    shift and go to state 110
    expr                           shift and go to state 105
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 67

    (56) read_line -> READ_LINE L_PAREN . R_PAREN
    R_PAREN         shift and go to state 111


state 68

    (65) var -> LET var_1 .
    NEWLINE         reduce using rule 65 (var -> LET var_1 .)
    SEMICOLON       reduce using rule 65 (var -> LET var_1 .)
    $end            reduce using rule 65 (var -> LET var_1 .)


state 69

    (88) func -> LET ID . L_PAREN func_params R_PAREN COLON func_type block
    (71) var_id -> ID . var_id_1
    (72) var_id -> ID .
    (73) var_id_1 -> . L_BRACKET INT_V R_BRACKET var_id_1
    (74) var_id_1 -> . L_BRACKET INT_V R_BRACKET
    L_PAREN         shift and go to state 112
    COLON           reduce using rule 72 (var_id -> ID .)
    L_BRACKET       shift and go to state 114

    var_id_1                       shift and go to state 113

state 70

    (66) var_1 -> var_2 . COMMA var_1
    (67) var_1 -> var_2 .
    COMMA           shift and go to state 115
    NEWLINE         reduce using rule 67 (var_1 -> var_2 .)
    SEMICOLON       reduce using rule 67 (var_1 -> var_2 .)
    $end            reduce using rule 67 (var_1 -> var_2 .)


state 71

    (68) var_2 -> var_3 . ASSIG expr
    (69) var_2 -> var_3 .
    ASSIG           shift and go to state 116
    COMMA           reduce using rule 69 (var_2 -> var_3 .)
    NEWLINE         reduce using rule 69 (var_2 -> var_3 .)
    SEMICOLON       reduce using rule 69 (var_2 -> var_3 .)
    $end            reduce using rule 69 (var_2 -> var_3 .)


state 72

    (70) var_3 -> var_id . COLON const_type
    COLON           shift and go to state 117


state 73

    (87) cond_if_else_if -> simple_if simple_else_if .
    RETURN          reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    ID              reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    WRITE_FILE      reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    READ_FILE       reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    PRINT           reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    READ_LINE       reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    LET             reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    FOR             reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    WHILE           reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    IF              reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    $end            reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)
    R_BRACE         reduce using rule 87 (cond_if_else_if -> simple_if simple_else_if .)


state 74

    (86) cond_if_else -> simple_if simple_else .
    RETURN          reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    ID              reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    WRITE_FILE      reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    READ_FILE       reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    PRINT           reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    READ_LINE       reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    LET             reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    FOR             reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    WHILE           reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    IF              reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    $end            reduce using rule 86 (cond_if_else -> simple_if simple_else .)
    R_BRACE         reduce using rule 86 (cond_if_else -> simple_if simple_else .)


state 75

    (82) simple_else_if -> ELSE_IF . L_PAREN expr R_PAREN block complex_else_if
    L_PAREN         shift and go to state 118


state 76

    (81) simple_else -> ELSE . block
    (15) block -> . ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    L_BRACE         reduce using rule 114 (empty -> .)

    block                          shift and go to state 119
    ignored_newlines               shift and go to state 120
    empty                          shift and go to state 3

state 77

    (76) for_loop -> FOR L_PAREN . var SEMICOLON expr SEMICOLON assign R_PAREN block
    (65) var -> . LET var_1
    LET             shift and go to state 122

    var                            shift and go to state 121

state 78

    (75) while_loop -> WHILE L_PAREN . expr R_PAREN block
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 123
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 79

    (80) simple_if -> IF L_PAREN . expr R_PAREN block
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 124
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 80

    (110) eos -> NEWLINE ignored_newlines .
    RETURN          reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    ID              reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    WRITE_FILE      reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    READ_FILE       reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    PRINT           reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    READ_LINE       reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    LET             reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    FOR             reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    WHILE           reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    IF              reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    $end            reduce using rule 110 (eos -> NEWLINE ignored_newlines .)
    R_BRACE         reduce using rule 110 (eos -> NEWLINE ignored_newlines .)


state 81

    (111) eos -> SEMICOLON ignored_newlines .
    RETURN          reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    ID              reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    WRITE_FILE      reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    READ_FILE       reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    PRINT           reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    READ_LINE       reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    LET             reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    FOR             reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    WHILE           reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    IF              reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    $end            reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)
    R_BRACE         reduce using rule 111 (eos -> SEMICOLON ignored_newlines .)


state 82

    (25) expr -> t_expr OR . expr
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    t_expr                         shift and go to state 41
    expr                           shift and go to state 125
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 83

    (27) t_expr -> g_expr AND . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    g_expr                         shift and go to state 42
    t_expr                         shift and go to state 126
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 84

    (29) g_expr -> m_expr comparison . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    m_expr                         shift and go to state 127
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 85

    (31) comparison -> LEQT .
    MINUS           reduce using rule 31 (comparison -> LEQT .)
    PLUS            reduce using rule 31 (comparison -> LEQT .)
    NOT             reduce using rule 31 (comparison -> LEQT .)
    ID              reduce using rule 31 (comparison -> LEQT .)
    L_PAREN         reduce using rule 31 (comparison -> LEQT .)
    L_BRACKET       reduce using rule 31 (comparison -> LEQT .)
    STRING_V        reduce using rule 31 (comparison -> LEQT .)
    BOOL_V          reduce using rule 31 (comparison -> LEQT .)
    FLOAT_V         reduce using rule 31 (comparison -> LEQT .)
    INT_V           reduce using rule 31 (comparison -> LEQT .)


state 86

    (32) comparison -> GEQT .
    MINUS           reduce using rule 32 (comparison -> GEQT .)
    PLUS            reduce using rule 32 (comparison -> GEQT .)
    NOT             reduce using rule 32 (comparison -> GEQT .)
    ID              reduce using rule 32 (comparison -> GEQT .)
    L_PAREN         reduce using rule 32 (comparison -> GEQT .)
    L_BRACKET       reduce using rule 32 (comparison -> GEQT .)
    STRING_V        reduce using rule 32 (comparison -> GEQT .)
    BOOL_V          reduce using rule 32 (comparison -> GEQT .)
    FLOAT_V         reduce using rule 32 (comparison -> GEQT .)
    INT_V           reduce using rule 32 (comparison -> GEQT .)


state 87

    (33) comparison -> LT .
    MINUS           reduce using rule 33 (comparison -> LT .)
    PLUS            reduce using rule 33 (comparison -> LT .)
    NOT             reduce using rule 33 (comparison -> LT .)
    ID              reduce using rule 33 (comparison -> LT .)
    L_PAREN         reduce using rule 33 (comparison -> LT .)
    L_BRACKET       reduce using rule 33 (comparison -> LT .)
    STRING_V        reduce using rule 33 (comparison -> LT .)
    BOOL_V          reduce using rule 33 (comparison -> LT .)
    FLOAT_V         reduce using rule 33 (comparison -> LT .)
    INT_V           reduce using rule 33 (comparison -> LT .)


state 88

    (34) comparison -> GT .
    MINUS           reduce using rule 34 (comparison -> GT .)
    PLUS            reduce using rule 34 (comparison -> GT .)
    NOT             reduce using rule 34 (comparison -> GT .)
    ID              reduce using rule 34 (comparison -> GT .)
    L_PAREN         reduce using rule 34 (comparison -> GT .)
    L_BRACKET       reduce using rule 34 (comparison -> GT .)
    STRING_V        reduce using rule 34 (comparison -> GT .)
    BOOL_V          reduce using rule 34 (comparison -> GT .)
    FLOAT_V         reduce using rule 34 (comparison -> GT .)
    INT_V           reduce using rule 34 (comparison -> GT .)


state 89

    (35) comparison -> NOT_EQ .
    MINUS           reduce using rule 35 (comparison -> NOT_EQ .)
    PLUS            reduce using rule 35 (comparison -> NOT_EQ .)
    NOT             reduce using rule 35 (comparison -> NOT_EQ .)
    ID              reduce using rule 35 (comparison -> NOT_EQ .)
    L_PAREN         reduce using rule 35 (comparison -> NOT_EQ .)
    L_BRACKET       reduce using rule 35 (comparison -> NOT_EQ .)
    STRING_V        reduce using rule 35 (comparison -> NOT_EQ .)
    BOOL_V          reduce using rule 35 (comparison -> NOT_EQ .)
    FLOAT_V         reduce using rule 35 (comparison -> NOT_EQ .)
    INT_V           reduce using rule 35 (comparison -> NOT_EQ .)


state 90

    (36) comparison -> EQ .
    MINUS           reduce using rule 36 (comparison -> EQ .)
    PLUS            reduce using rule 36 (comparison -> EQ .)
    NOT             reduce using rule 36 (comparison -> EQ .)
    ID              reduce using rule 36 (comparison -> EQ .)
    L_PAREN         reduce using rule 36 (comparison -> EQ .)
    L_BRACKET       reduce using rule 36 (comparison -> EQ .)
    STRING_V        reduce using rule 36 (comparison -> EQ .)
    BOOL_V          reduce using rule 36 (comparison -> EQ .)
    FLOAT_V         reduce using rule 36 (comparison -> EQ .)
    INT_V           reduce using rule 36 (comparison -> EQ .)


state 91

    (37) m_expr -> term MINUS . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    term                           shift and go to state 44
    m_expr                         shift and go to state 128
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 92

    (38) m_expr -> term PLUS . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    term                           shift and go to state 44
    m_expr                         shift and go to state 129
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 93

    (46) factor -> MINUS factor_1 .
    EXP             reduce using rule 46 (factor -> MINUS factor_1 .)
    MOD             reduce using rule 46 (factor -> MINUS factor_1 .)
    DIV             reduce using rule 46 (factor -> MINUS factor_1 .)
    MULT            reduce using rule 46 (factor -> MINUS factor_1 .)
    MINUS           reduce using rule 46 (factor -> MINUS factor_1 .)
    PLUS            reduce using rule 46 (factor -> MINUS factor_1 .)
    LEQT            reduce using rule 46 (factor -> MINUS factor_1 .)
    GEQT            reduce using rule 46 (factor -> MINUS factor_1 .)
    LT              reduce using rule 46 (factor -> MINUS factor_1 .)
    GT              reduce using rule 46 (factor -> MINUS factor_1 .)
    NOT_EQ          reduce using rule 46 (factor -> MINUS factor_1 .)
    EQ              reduce using rule 46 (factor -> MINUS factor_1 .)
    AND             reduce using rule 46 (factor -> MINUS factor_1 .)
    OR              reduce using rule 46 (factor -> MINUS factor_1 .)
    NEWLINE         reduce using rule 46 (factor -> MINUS factor_1 .)
    SEMICOLON       reduce using rule 46 (factor -> MINUS factor_1 .)
    $end            reduce using rule 46 (factor -> MINUS factor_1 .)
    R_PAREN         reduce using rule 46 (factor -> MINUS factor_1 .)
    COMMA           reduce using rule 46 (factor -> MINUS factor_1 .)
    R_BRACKET       reduce using rule 46 (factor -> MINUS factor_1 .)


state 94

    (47) factor -> PLUS factor_1 .
    EXP             reduce using rule 47 (factor -> PLUS factor_1 .)
    MOD             reduce using rule 47 (factor -> PLUS factor_1 .)
    DIV             reduce using rule 47 (factor -> PLUS factor_1 .)
    MULT            reduce using rule 47 (factor -> PLUS factor_1 .)
    MINUS           reduce using rule 47 (factor -> PLUS factor_1 .)
    PLUS            reduce using rule 47 (factor -> PLUS factor_1 .)
    LEQT            reduce using rule 47 (factor -> PLUS factor_1 .)
    GEQT            reduce using rule 47 (factor -> PLUS factor_1 .)
    LT              reduce using rule 47 (factor -> PLUS factor_1 .)
    GT              reduce using rule 47 (factor -> PLUS factor_1 .)
    NOT_EQ          reduce using rule 47 (factor -> PLUS factor_1 .)
    EQ              reduce using rule 47 (factor -> PLUS factor_1 .)
    AND             reduce using rule 47 (factor -> PLUS factor_1 .)
    OR              reduce using rule 47 (factor -> PLUS factor_1 .)
    NEWLINE         reduce using rule 47 (factor -> PLUS factor_1 .)
    SEMICOLON       reduce using rule 47 (factor -> PLUS factor_1 .)
    $end            reduce using rule 47 (factor -> PLUS factor_1 .)
    R_PAREN         reduce using rule 47 (factor -> PLUS factor_1 .)
    COMMA           reduce using rule 47 (factor -> PLUS factor_1 .)
    R_BRACKET       reduce using rule 47 (factor -> PLUS factor_1 .)


state 95

    (40) term -> exp_factor MOD . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    exp_factor                     shift and go to state 47
    term                           shift and go to state 130
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 96

    (41) term -> exp_factor DIV . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    exp_factor                     shift and go to state 47
    term                           shift and go to state 131
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 97

    (42) term -> exp_factor MULT . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    exp_factor                     shift and go to state 47
    term                           shift and go to state 132
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 98

    (44) exp_factor -> factor EXP . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    factor                         shift and go to state 48
    exp_factor                     shift and go to state 133
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 99

    (48) factor -> NOT factor_1 .
    EXP             reduce using rule 48 (factor -> NOT factor_1 .)
    MOD             reduce using rule 48 (factor -> NOT factor_1 .)
    DIV             reduce using rule 48 (factor -> NOT factor_1 .)
    MULT            reduce using rule 48 (factor -> NOT factor_1 .)
    MINUS           reduce using rule 48 (factor -> NOT factor_1 .)
    PLUS            reduce using rule 48 (factor -> NOT factor_1 .)
    LEQT            reduce using rule 48 (factor -> NOT factor_1 .)
    GEQT            reduce using rule 48 (factor -> NOT factor_1 .)
    LT              reduce using rule 48 (factor -> NOT factor_1 .)
    GT              reduce using rule 48 (factor -> NOT factor_1 .)
    NOT_EQ          reduce using rule 48 (factor -> NOT factor_1 .)
    EQ              reduce using rule 48 (factor -> NOT factor_1 .)
    AND             reduce using rule 48 (factor -> NOT factor_1 .)
    OR              reduce using rule 48 (factor -> NOT factor_1 .)
    NEWLINE         reduce using rule 48 (factor -> NOT factor_1 .)
    SEMICOLON       reduce using rule 48 (factor -> NOT factor_1 .)
    $end            reduce using rule 48 (factor -> NOT factor_1 .)
    R_PAREN         reduce using rule 48 (factor -> NOT factor_1 .)
    COMMA           reduce using rule 48 (factor -> NOT factor_1 .)
    R_BRACKET       reduce using rule 48 (factor -> NOT factor_1 .)


state 100

    (12) tens_id -> ID tens_id_1 .
    EXP             reduce using rule 12 (tens_id -> ID tens_id_1 .)
    MOD             reduce using rule 12 (tens_id -> ID tens_id_1 .)
    DIV             reduce using rule 12 (tens_id -> ID tens_id_1 .)
    MULT            reduce using rule 12 (tens_id -> ID tens_id_1 .)
    MINUS           reduce using rule 12 (tens_id -> ID tens_id_1 .)
    PLUS            reduce using rule 12 (tens_id -> ID tens_id_1 .)
    LEQT            reduce using rule 12 (tens_id -> ID tens_id_1 .)
    GEQT            reduce using rule 12 (tens_id -> ID tens_id_1 .)
    LT              reduce using rule 12 (tens_id -> ID tens_id_1 .)
    GT              reduce using rule 12 (tens_id -> ID tens_id_1 .)
    NOT_EQ          reduce using rule 12 (tens_id -> ID tens_id_1 .)
    EQ              reduce using rule 12 (tens_id -> ID tens_id_1 .)
    AND             reduce using rule 12 (tens_id -> ID tens_id_1 .)
    OR              reduce using rule 12 (tens_id -> ID tens_id_1 .)
    NEWLINE         reduce using rule 12 (tens_id -> ID tens_id_1 .)
    SEMICOLON       reduce using rule 12 (tens_id -> ID tens_id_1 .)
    $end            reduce using rule 12 (tens_id -> ID tens_id_1 .)
    R_PAREN         reduce using rule 12 (tens_id -> ID tens_id_1 .)
    COMMA           reduce using rule 12 (tens_id -> ID tens_id_1 .)
    R_BRACKET       reduce using rule 12 (tens_id -> ID tens_id_1 .)


state 101

    (13) tens_id_1 -> L_BRACKET . expr R_BRACKET tens_id_1
    (14) tens_id_1 -> L_BRACKET . expr R_BRACKET
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 134
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 102

    (55) factor_1 -> L_PAREN expr . R_PAREN
    R_PAREN         shift and go to state 135


state 103

    (9) tens -> L_BRACKET expr . tens_1
    (10) tens_1 -> . COMMA expr tens_1
    (11) tens_1 -> . R_BRACKET
    COMMA           shift and go to state 137
    R_BRACKET       shift and go to state 138

    tens_1                         shift and go to state 136

state 104

    (60) func_call -> ID L_PAREN func_call_1 .
    NEWLINE         reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    SEMICOLON       reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    $end            reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    EXP             reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    MOD             reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    DIV             reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    MULT            reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    MINUS           reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    PLUS            reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    LEQT            reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    GEQT            reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    LT              reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    GT              reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    NOT_EQ          reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    EQ              reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    AND             reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    OR              reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    R_PAREN         reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    COMMA           reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)
    R_BRACKET       reduce using rule 60 (func_call -> ID L_PAREN func_call_1 .)


state 105

    (61) func_call_1 -> expr . COMMA func_call_1
    (62) func_call_1 -> expr . R_PAREN
    COMMA           shift and go to state 139
    R_PAREN         shift and go to state 140


state 106

    (63) func_call_1 -> R_PAREN .
    NEWLINE         reduce using rule 63 (func_call_1 -> R_PAREN .)
    SEMICOLON       reduce using rule 63 (func_call_1 -> R_PAREN .)
    $end            reduce using rule 63 (func_call_1 -> R_PAREN .)
    EXP             reduce using rule 63 (func_call_1 -> R_PAREN .)
    MOD             reduce using rule 63 (func_call_1 -> R_PAREN .)
    DIV             reduce using rule 63 (func_call_1 -> R_PAREN .)
    MULT            reduce using rule 63 (func_call_1 -> R_PAREN .)
    MINUS           reduce using rule 63 (func_call_1 -> R_PAREN .)
    PLUS            reduce using rule 63 (func_call_1 -> R_PAREN .)
    LEQT            reduce using rule 63 (func_call_1 -> R_PAREN .)
    GEQT            reduce using rule 63 (func_call_1 -> R_PAREN .)
    LT              reduce using rule 63 (func_call_1 -> R_PAREN .)
    GT              reduce using rule 63 (func_call_1 -> R_PAREN .)
    NOT_EQ          reduce using rule 63 (func_call_1 -> R_PAREN .)
    EQ              reduce using rule 63 (func_call_1 -> R_PAREN .)
    AND             reduce using rule 63 (func_call_1 -> R_PAREN .)
    OR              reduce using rule 63 (func_call_1 -> R_PAREN .)
    R_PAREN         reduce using rule 63 (func_call_1 -> R_PAREN .)
    COMMA           reduce using rule 63 (func_call_1 -> R_PAREN .)
    R_BRACKET       reduce using rule 63 (func_call_1 -> R_PAREN .)


state 107

    (64) assign -> ID ASSIG expr .
    NEWLINE         reduce using rule 64 (assign -> ID ASSIG expr .)
    SEMICOLON       reduce using rule 64 (assign -> ID ASSIG expr .)
    $end            reduce using rule 64 (assign -> ID ASSIG expr .)
    R_PAREN         reduce using rule 64 (assign -> ID ASSIG expr .)


state 108

    (59) write_file -> WRITE_FILE L_PAREN func_call_1 .
    NEWLINE         reduce using rule 59 (write_file -> WRITE_FILE L_PAREN func_call_1 .)
    SEMICOLON       reduce using rule 59 (write_file -> WRITE_FILE L_PAREN func_call_1 .)
    $end            reduce using rule 59 (write_file -> WRITE_FILE L_PAREN func_call_1 .)


state 109

    (58) read_file -> READ_FILE L_PAREN R_PAREN .
    NEWLINE         reduce using rule 58 (read_file -> READ_FILE L_PAREN R_PAREN .)
    SEMICOLON       reduce using rule 58 (read_file -> READ_FILE L_PAREN R_PAREN .)
    $end            reduce using rule 58 (read_file -> READ_FILE L_PAREN R_PAREN .)


state 110

    (57) print_rule -> PRINT L_PAREN func_call_1 .
    NEWLINE         reduce using rule 57 (print_rule -> PRINT L_PAREN func_call_1 .)
    SEMICOLON       reduce using rule 57 (print_rule -> PRINT L_PAREN func_call_1 .)
    $end            reduce using rule 57 (print_rule -> PRINT L_PAREN func_call_1 .)


state 111

    (56) read_line -> READ_LINE L_PAREN R_PAREN .
    NEWLINE         reduce using rule 56 (read_line -> READ_LINE L_PAREN R_PAREN .)
    SEMICOLON       reduce using rule 56 (read_line -> READ_LINE L_PAREN R_PAREN .)
    $end            reduce using rule 56 (read_line -> READ_LINE L_PAREN R_PAREN .)


state 112

    (88) func -> LET ID L_PAREN . func_params R_PAREN COLON func_type block
    (89) func_params -> . func_params_1
    (90) func_params -> . empty
    (91) func_params_1 -> . ID COLON const_type COMMA func_params_1
    (92) func_params_1 -> . ID COLON const_type
    (114) empty -> .
    ID              shift and go to state 141
    R_PAREN         reduce using rule 114 (empty -> .)

    func_params                    shift and go to state 142
    func_params_1                  shift and go to state 143
    empty                          shift and go to state 144

state 113

    (71) var_id -> ID var_id_1 .
    COLON           reduce using rule 71 (var_id -> ID var_id_1 .)


state 114

    (73) var_id_1 -> L_BRACKET . INT_V R_BRACKET var_id_1
    (74) var_id_1 -> L_BRACKET . INT_V R_BRACKET
    INT_V           shift and go to state 145


state 115

    (66) var_1 -> var_2 COMMA . var_1
    (66) var_1 -> . var_2 COMMA var_1
    (67) var_1 -> . var_2
    (68) var_2 -> . var_3 ASSIG expr
    (69) var_2 -> . var_3
    (70) var_3 -> . var_id COLON const_type
    (71) var_id -> . ID var_id_1
    (72) var_id -> . ID
    ID              shift and go to state 147

    var_2                          shift and go to state 70
    var_1                          shift and go to state 146
    var_3                          shift and go to state 71
    var_id                         shift and go to state 72

state 116

    (68) var_2 -> var_3 ASSIG . expr
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 148
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 117

    (70) var_3 -> var_id COLON . const_type
    (18) const_type -> . GPU_BOOL_T
    (19) const_type -> . GPU_FLOAT_T
    (20) const_type -> . GPU_INT_T
    (21) const_type -> . BOOL_T
    (22) const_type -> . STRING_T
    (23) const_type -> . FLOAT_T
    (24) const_type -> . INT_T
    GPU_BOOL_T      shift and go to state 150
    GPU_FLOAT_T     shift and go to state 151
    GPU_INT_T       shift and go to state 152
    BOOL_T          shift and go to state 153
    STRING_T        shift and go to state 154
    FLOAT_T         shift and go to state 155
    INT_T           shift and go to state 156

    const_type                     shift and go to state 149

state 118

    (82) simple_else_if -> ELSE_IF L_PAREN . expr R_PAREN block complex_else_if
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 157
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 119

    (81) simple_else -> ELSE block .
    RETURN          reduce using rule 81 (simple_else -> ELSE block .)
    ID              reduce using rule 81 (simple_else -> ELSE block .)
    WRITE_FILE      reduce using rule 81 (simple_else -> ELSE block .)
    READ_FILE       reduce using rule 81 (simple_else -> ELSE block .)
    PRINT           reduce using rule 81 (simple_else -> ELSE block .)
    READ_LINE       reduce using rule 81 (simple_else -> ELSE block .)
    LET             reduce using rule 81 (simple_else -> ELSE block .)
    FOR             reduce using rule 81 (simple_else -> ELSE block .)
    WHILE           reduce using rule 81 (simple_else -> ELSE block .)
    IF              reduce using rule 81 (simple_else -> ELSE block .)
    $end            reduce using rule 81 (simple_else -> ELSE block .)
    R_BRACE         reduce using rule 81 (simple_else -> ELSE block .)


state 120

    (15) block -> ignored_newlines . L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines
    L_BRACE         shift and go to state 158


state 121

    (76) for_loop -> FOR L_PAREN var . SEMICOLON expr SEMICOLON assign R_PAREN block
    SEMICOLON       shift and go to state 159


state 122

    (65) var -> LET . var_1
    (66) var_1 -> . var_2 COMMA var_1
    (67) var_1 -> . var_2
    (68) var_2 -> . var_3 ASSIG expr
    (69) var_2 -> . var_3
    (70) var_3 -> . var_id COLON const_type
    (71) var_id -> . ID var_id_1
    (72) var_id -> . ID
    ID              shift and go to state 147

    var_1                          shift and go to state 68
    var_2                          shift and go to state 70
    var_3                          shift and go to state 71
    var_id                         shift and go to state 72

state 123

    (75) while_loop -> WHILE L_PAREN expr . R_PAREN block
    R_PAREN         shift and go to state 160


state 124

    (80) simple_if -> IF L_PAREN expr . R_PAREN block
    R_PAREN         shift and go to state 161


state 125

    (25) expr -> t_expr OR expr .
    NEWLINE         reduce using rule 25 (expr -> t_expr OR expr .)
    SEMICOLON       reduce using rule 25 (expr -> t_expr OR expr .)
    $end            reduce using rule 25 (expr -> t_expr OR expr .)
    R_PAREN         reduce using rule 25 (expr -> t_expr OR expr .)
    COMMA           reduce using rule 25 (expr -> t_expr OR expr .)
    R_BRACKET       reduce using rule 25 (expr -> t_expr OR expr .)


state 126

    (27) t_expr -> g_expr AND t_expr .
    OR              reduce using rule 27 (t_expr -> g_expr AND t_expr .)
    NEWLINE         reduce using rule 27 (t_expr -> g_expr AND t_expr .)
    SEMICOLON       reduce using rule 27 (t_expr -> g_expr AND t_expr .)
    $end            reduce using rule 27 (t_expr -> g_expr AND t_expr .)
    R_PAREN         reduce using rule 27 (t_expr -> g_expr AND t_expr .)
    COMMA           reduce using rule 27 (t_expr -> g_expr AND t_expr .)
    R_BRACKET       reduce using rule 27 (t_expr -> g_expr AND t_expr .)


state 127

    (29) g_expr -> m_expr comparison m_expr .
    AND             reduce using rule 29 (g_expr -> m_expr comparison m_expr .)
    OR              reduce using rule 29 (g_expr -> m_expr comparison m_expr .)
    NEWLINE         reduce using rule 29 (g_expr -> m_expr comparison m_expr .)
    SEMICOLON       reduce using rule 29 (g_expr -> m_expr comparison m_expr .)
    $end            reduce using rule 29 (g_expr -> m_expr comparison m_expr .)
    R_PAREN         reduce using rule 29 (g_expr -> m_expr comparison m_expr .)
    COMMA           reduce using rule 29 (g_expr -> m_expr comparison m_expr .)
    R_BRACKET       reduce using rule 29 (g_expr -> m_expr comparison m_expr .)


state 128

    (37) m_expr -> term MINUS m_expr .
    LEQT            reduce using rule 37 (m_expr -> term MINUS m_expr .)
    GEQT            reduce using rule 37 (m_expr -> term MINUS m_expr .)
    LT              reduce using rule 37 (m_expr -> term MINUS m_expr .)
    GT              reduce using rule 37 (m_expr -> term MINUS m_expr .)
    NOT_EQ          reduce using rule 37 (m_expr -> term MINUS m_expr .)
    EQ              reduce using rule 37 (m_expr -> term MINUS m_expr .)
    AND             reduce using rule 37 (m_expr -> term MINUS m_expr .)
    OR              reduce using rule 37 (m_expr -> term MINUS m_expr .)
    NEWLINE         reduce using rule 37 (m_expr -> term MINUS m_expr .)
    SEMICOLON       reduce using rule 37 (m_expr -> term MINUS m_expr .)
    $end            reduce using rule 37 (m_expr -> term MINUS m_expr .)
    R_PAREN         reduce using rule 37 (m_expr -> term MINUS m_expr .)
    COMMA           reduce using rule 37 (m_expr -> term MINUS m_expr .)
    R_BRACKET       reduce using rule 37 (m_expr -> term MINUS m_expr .)


state 129

    (38) m_expr -> term PLUS m_expr .
    LEQT            reduce using rule 38 (m_expr -> term PLUS m_expr .)
    GEQT            reduce using rule 38 (m_expr -> term PLUS m_expr .)
    LT              reduce using rule 38 (m_expr -> term PLUS m_expr .)
    GT              reduce using rule 38 (m_expr -> term PLUS m_expr .)
    NOT_EQ          reduce using rule 38 (m_expr -> term PLUS m_expr .)
    EQ              reduce using rule 38 (m_expr -> term PLUS m_expr .)
    AND             reduce using rule 38 (m_expr -> term PLUS m_expr .)
    OR              reduce using rule 38 (m_expr -> term PLUS m_expr .)
    NEWLINE         reduce using rule 38 (m_expr -> term PLUS m_expr .)
    SEMICOLON       reduce using rule 38 (m_expr -> term PLUS m_expr .)
    $end            reduce using rule 38 (m_expr -> term PLUS m_expr .)
    R_PAREN         reduce using rule 38 (m_expr -> term PLUS m_expr .)
    COMMA           reduce using rule 38 (m_expr -> term PLUS m_expr .)
    R_BRACKET       reduce using rule 38 (m_expr -> term PLUS m_expr .)


state 130

    (40) term -> exp_factor MOD term .
    MINUS           reduce using rule 40 (term -> exp_factor MOD term .)
    PLUS            reduce using rule 40 (term -> exp_factor MOD term .)
    LEQT            reduce using rule 40 (term -> exp_factor MOD term .)
    GEQT            reduce using rule 40 (term -> exp_factor MOD term .)
    LT              reduce using rule 40 (term -> exp_factor MOD term .)
    GT              reduce using rule 40 (term -> exp_factor MOD term .)
    NOT_EQ          reduce using rule 40 (term -> exp_factor MOD term .)
    EQ              reduce using rule 40 (term -> exp_factor MOD term .)
    AND             reduce using rule 40 (term -> exp_factor MOD term .)
    OR              reduce using rule 40 (term -> exp_factor MOD term .)
    NEWLINE         reduce using rule 40 (term -> exp_factor MOD term .)
    SEMICOLON       reduce using rule 40 (term -> exp_factor MOD term .)
    $end            reduce using rule 40 (term -> exp_factor MOD term .)
    R_PAREN         reduce using rule 40 (term -> exp_factor MOD term .)
    COMMA           reduce using rule 40 (term -> exp_factor MOD term .)
    R_BRACKET       reduce using rule 40 (term -> exp_factor MOD term .)


state 131

    (41) term -> exp_factor DIV term .
    MINUS           reduce using rule 41 (term -> exp_factor DIV term .)
    PLUS            reduce using rule 41 (term -> exp_factor DIV term .)
    LEQT            reduce using rule 41 (term -> exp_factor DIV term .)
    GEQT            reduce using rule 41 (term -> exp_factor DIV term .)
    LT              reduce using rule 41 (term -> exp_factor DIV term .)
    GT              reduce using rule 41 (term -> exp_factor DIV term .)
    NOT_EQ          reduce using rule 41 (term -> exp_factor DIV term .)
    EQ              reduce using rule 41 (term -> exp_factor DIV term .)
    AND             reduce using rule 41 (term -> exp_factor DIV term .)
    OR              reduce using rule 41 (term -> exp_factor DIV term .)
    NEWLINE         reduce using rule 41 (term -> exp_factor DIV term .)
    SEMICOLON       reduce using rule 41 (term -> exp_factor DIV term .)
    $end            reduce using rule 41 (term -> exp_factor DIV term .)
    R_PAREN         reduce using rule 41 (term -> exp_factor DIV term .)
    COMMA           reduce using rule 41 (term -> exp_factor DIV term .)
    R_BRACKET       reduce using rule 41 (term -> exp_factor DIV term .)


state 132

    (42) term -> exp_factor MULT term .
    MINUS           reduce using rule 42 (term -> exp_factor MULT term .)
    PLUS            reduce using rule 42 (term -> exp_factor MULT term .)
    LEQT            reduce using rule 42 (term -> exp_factor MULT term .)
    GEQT            reduce using rule 42 (term -> exp_factor MULT term .)
    LT              reduce using rule 42 (term -> exp_factor MULT term .)
    GT              reduce using rule 42 (term -> exp_factor MULT term .)
    NOT_EQ          reduce using rule 42 (term -> exp_factor MULT term .)
    EQ              reduce using rule 42 (term -> exp_factor MULT term .)
    AND             reduce using rule 42 (term -> exp_factor MULT term .)
    OR              reduce using rule 42 (term -> exp_factor MULT term .)
    NEWLINE         reduce using rule 42 (term -> exp_factor MULT term .)
    SEMICOLON       reduce using rule 42 (term -> exp_factor MULT term .)
    $end            reduce using rule 42 (term -> exp_factor MULT term .)
    R_PAREN         reduce using rule 42 (term -> exp_factor MULT term .)
    COMMA           reduce using rule 42 (term -> exp_factor MULT term .)
    R_BRACKET       reduce using rule 42 (term -> exp_factor MULT term .)


state 133

    (44) exp_factor -> factor EXP exp_factor .
    MOD             reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    DIV             reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    MULT            reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    MINUS           reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    PLUS            reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    LEQT            reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    GEQT            reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    LT              reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    GT              reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    NOT_EQ          reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    EQ              reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    AND             reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    OR              reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    NEWLINE         reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    SEMICOLON       reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    $end            reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    R_PAREN         reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    COMMA           reduce using rule 44 (exp_factor -> factor EXP exp_factor .)
    R_BRACKET       reduce using rule 44 (exp_factor -> factor EXP exp_factor .)


state 134

    (13) tens_id_1 -> L_BRACKET expr . R_BRACKET tens_id_1
    (14) tens_id_1 -> L_BRACKET expr . R_BRACKET
    R_BRACKET       shift and go to state 162


state 135

    (55) factor_1 -> L_PAREN expr R_PAREN .
    EXP             reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    MOD             reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    DIV             reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    MULT            reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    MINUS           reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    PLUS            reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    LEQT            reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    GEQT            reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    LT              reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    GT              reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    NOT_EQ          reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    EQ              reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    AND             reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    OR              reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    NEWLINE         reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    SEMICOLON       reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    $end            reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    R_PAREN         reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    COMMA           reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)
    R_BRACKET       reduce using rule 55 (factor_1 -> L_PAREN expr R_PAREN .)


state 136

    (9) tens -> L_BRACKET expr tens_1 .
    EXP             reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    MOD             reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    DIV             reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    MULT            reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    MINUS           reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    PLUS            reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    LEQT            reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    GEQT            reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    LT              reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    GT              reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    NOT_EQ          reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    EQ              reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    AND             reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    OR              reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    NEWLINE         reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    SEMICOLON       reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    $end            reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    R_PAREN         reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    COMMA           reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)
    R_BRACKET       reduce using rule 9 (tens -> L_BRACKET expr tens_1 .)


state 137

    (10) tens_1 -> COMMA . expr tens_1
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 163
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 138

    (11) tens_1 -> R_BRACKET .
    EXP             reduce using rule 11 (tens_1 -> R_BRACKET .)
    MOD             reduce using rule 11 (tens_1 -> R_BRACKET .)
    DIV             reduce using rule 11 (tens_1 -> R_BRACKET .)
    MULT            reduce using rule 11 (tens_1 -> R_BRACKET .)
    MINUS           reduce using rule 11 (tens_1 -> R_BRACKET .)
    PLUS            reduce using rule 11 (tens_1 -> R_BRACKET .)
    LEQT            reduce using rule 11 (tens_1 -> R_BRACKET .)
    GEQT            reduce using rule 11 (tens_1 -> R_BRACKET .)
    LT              reduce using rule 11 (tens_1 -> R_BRACKET .)
    GT              reduce using rule 11 (tens_1 -> R_BRACKET .)
    NOT_EQ          reduce using rule 11 (tens_1 -> R_BRACKET .)
    EQ              reduce using rule 11 (tens_1 -> R_BRACKET .)
    AND             reduce using rule 11 (tens_1 -> R_BRACKET .)
    OR              reduce using rule 11 (tens_1 -> R_BRACKET .)
    NEWLINE         reduce using rule 11 (tens_1 -> R_BRACKET .)
    SEMICOLON       reduce using rule 11 (tens_1 -> R_BRACKET .)
    $end            reduce using rule 11 (tens_1 -> R_BRACKET .)
    R_PAREN         reduce using rule 11 (tens_1 -> R_BRACKET .)
    COMMA           reduce using rule 11 (tens_1 -> R_BRACKET .)
    R_BRACKET       reduce using rule 11 (tens_1 -> R_BRACKET .)


state 139

    (61) func_call_1 -> expr COMMA . func_call_1
    (61) func_call_1 -> . expr COMMA func_call_1
    (62) func_call_1 -> . expr R_PAREN
    (63) func_call_1 -> . R_PAREN
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    R_PAREN         shift and go to state 106
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 105
    func_call_1                    shift and go to state 164
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 140

    (62) func_call_1 -> expr R_PAREN .
    NEWLINE         reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    SEMICOLON       reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    $end            reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    EXP             reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    MOD             reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    DIV             reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    MULT            reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    MINUS           reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    PLUS            reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    LEQT            reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    GEQT            reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    LT              reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    GT              reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    NOT_EQ          reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    EQ              reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    AND             reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    OR              reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    R_PAREN         reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    COMMA           reduce using rule 62 (func_call_1 -> expr R_PAREN .)
    R_BRACKET       reduce using rule 62 (func_call_1 -> expr R_PAREN .)


state 141

    (91) func_params_1 -> ID . COLON const_type COMMA func_params_1
    (92) func_params_1 -> ID . COLON const_type
    COLON           shift and go to state 165


state 142

    (88) func -> LET ID L_PAREN func_params . R_PAREN COLON func_type block
    R_PAREN         shift and go to state 166


state 143

    (89) func_params -> func_params_1 .
    R_PAREN         reduce using rule 89 (func_params -> func_params_1 .)


state 144

    (90) func_params -> empty .
    R_PAREN         reduce using rule 90 (func_params -> empty .)


state 145

    (73) var_id_1 -> L_BRACKET INT_V . R_BRACKET var_id_1
    (74) var_id_1 -> L_BRACKET INT_V . R_BRACKET
    R_BRACKET       shift and go to state 167


state 146

    (66) var_1 -> var_2 COMMA var_1 .
    NEWLINE         reduce using rule 66 (var_1 -> var_2 COMMA var_1 .)
    SEMICOLON       reduce using rule 66 (var_1 -> var_2 COMMA var_1 .)
    $end            reduce using rule 66 (var_1 -> var_2 COMMA var_1 .)


state 147

    (71) var_id -> ID . var_id_1
    (72) var_id -> ID .
    (73) var_id_1 -> . L_BRACKET INT_V R_BRACKET var_id_1
    (74) var_id_1 -> . L_BRACKET INT_V R_BRACKET
    COLON           reduce using rule 72 (var_id -> ID .)
    L_BRACKET       shift and go to state 114

    var_id_1                       shift and go to state 113

state 148

    (68) var_2 -> var_3 ASSIG expr .
    COMMA           reduce using rule 68 (var_2 -> var_3 ASSIG expr .)
    NEWLINE         reduce using rule 68 (var_2 -> var_3 ASSIG expr .)
    SEMICOLON       reduce using rule 68 (var_2 -> var_3 ASSIG expr .)
    $end            reduce using rule 68 (var_2 -> var_3 ASSIG expr .)


state 149

    (70) var_3 -> var_id COLON const_type .
    ASSIG           reduce using rule 70 (var_3 -> var_id COLON const_type .)
    COMMA           reduce using rule 70 (var_3 -> var_id COLON const_type .)
    NEWLINE         reduce using rule 70 (var_3 -> var_id COLON const_type .)
    SEMICOLON       reduce using rule 70 (var_3 -> var_id COLON const_type .)
    $end            reduce using rule 70 (var_3 -> var_id COLON const_type .)


state 150

    (18) const_type -> GPU_BOOL_T .
    ASSIG           reduce using rule 18 (const_type -> GPU_BOOL_T .)
    COMMA           reduce using rule 18 (const_type -> GPU_BOOL_T .)
    NEWLINE         reduce using rule 18 (const_type -> GPU_BOOL_T .)
    SEMICOLON       reduce using rule 18 (const_type -> GPU_BOOL_T .)
    $end            reduce using rule 18 (const_type -> GPU_BOOL_T .)
    R_PAREN         reduce using rule 18 (const_type -> GPU_BOOL_T .)
    L_BRACE         reduce using rule 18 (const_type -> GPU_BOOL_T .)


state 151

    (19) const_type -> GPU_FLOAT_T .
    ASSIG           reduce using rule 19 (const_type -> GPU_FLOAT_T .)
    COMMA           reduce using rule 19 (const_type -> GPU_FLOAT_T .)
    NEWLINE         reduce using rule 19 (const_type -> GPU_FLOAT_T .)
    SEMICOLON       reduce using rule 19 (const_type -> GPU_FLOAT_T .)
    $end            reduce using rule 19 (const_type -> GPU_FLOAT_T .)
    R_PAREN         reduce using rule 19 (const_type -> GPU_FLOAT_T .)
    L_BRACE         reduce using rule 19 (const_type -> GPU_FLOAT_T .)


state 152

    (20) const_type -> GPU_INT_T .
    ASSIG           reduce using rule 20 (const_type -> GPU_INT_T .)
    COMMA           reduce using rule 20 (const_type -> GPU_INT_T .)
    NEWLINE         reduce using rule 20 (const_type -> GPU_INT_T .)
    SEMICOLON       reduce using rule 20 (const_type -> GPU_INT_T .)
    $end            reduce using rule 20 (const_type -> GPU_INT_T .)
    R_PAREN         reduce using rule 20 (const_type -> GPU_INT_T .)
    L_BRACE         reduce using rule 20 (const_type -> GPU_INT_T .)


state 153

    (21) const_type -> BOOL_T .
    ASSIG           reduce using rule 21 (const_type -> BOOL_T .)
    COMMA           reduce using rule 21 (const_type -> BOOL_T .)
    NEWLINE         reduce using rule 21 (const_type -> BOOL_T .)
    SEMICOLON       reduce using rule 21 (const_type -> BOOL_T .)
    $end            reduce using rule 21 (const_type -> BOOL_T .)
    R_PAREN         reduce using rule 21 (const_type -> BOOL_T .)
    L_BRACE         reduce using rule 21 (const_type -> BOOL_T .)


state 154

    (22) const_type -> STRING_T .
    ASSIG           reduce using rule 22 (const_type -> STRING_T .)
    COMMA           reduce using rule 22 (const_type -> STRING_T .)
    NEWLINE         reduce using rule 22 (const_type -> STRING_T .)
    SEMICOLON       reduce using rule 22 (const_type -> STRING_T .)
    $end            reduce using rule 22 (const_type -> STRING_T .)
    R_PAREN         reduce using rule 22 (const_type -> STRING_T .)
    L_BRACE         reduce using rule 22 (const_type -> STRING_T .)


state 155

    (23) const_type -> FLOAT_T .
    ASSIG           reduce using rule 23 (const_type -> FLOAT_T .)
    COMMA           reduce using rule 23 (const_type -> FLOAT_T .)
    NEWLINE         reduce using rule 23 (const_type -> FLOAT_T .)
    SEMICOLON       reduce using rule 23 (const_type -> FLOAT_T .)
    $end            reduce using rule 23 (const_type -> FLOAT_T .)
    R_PAREN         reduce using rule 23 (const_type -> FLOAT_T .)
    L_BRACE         reduce using rule 23 (const_type -> FLOAT_T .)


state 156

    (24) const_type -> INT_T .
    ASSIG           reduce using rule 24 (const_type -> INT_T .)
    COMMA           reduce using rule 24 (const_type -> INT_T .)
    NEWLINE         reduce using rule 24 (const_type -> INT_T .)
    SEMICOLON       reduce using rule 24 (const_type -> INT_T .)
    $end            reduce using rule 24 (const_type -> INT_T .)
    R_PAREN         reduce using rule 24 (const_type -> INT_T .)
    L_BRACE         reduce using rule 24 (const_type -> INT_T .)


state 157

    (82) simple_else_if -> ELSE_IF L_PAREN expr . R_PAREN block complex_else_if
    R_PAREN         shift and go to state 168


state 158

    (15) block -> ignored_newlines L_BRACE . ignored_newlines block_1 R_BRACE ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    LET             reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WRITE_FILE      reduce using rule 114 (empty -> .)
    READ_FILE       reduce using rule 114 (empty -> .)
    PRINT           reduce using rule 114 (empty -> .)
    READ_LINE       reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    R_BRACE         reduce using rule 114 (empty -> .)

    ignored_newlines               shift and go to state 169
    empty                          shift and go to state 3

state 159

    (76) for_loop -> FOR L_PAREN var SEMICOLON . expr SEMICOLON assign R_PAREN block
    (25) expr -> . t_expr OR expr
    (26) expr -> . t_expr
    (27) t_expr -> . g_expr AND t_expr
    (28) t_expr -> . g_expr
    (29) g_expr -> . m_expr comparison m_expr
    (30) g_expr -> . m_expr
    (37) m_expr -> . term MINUS m_expr
    (38) m_expr -> . term PLUS m_expr
    (39) m_expr -> . term
    (40) term -> . exp_factor MOD term
    (41) term -> . exp_factor DIV term
    (42) term -> . exp_factor MULT term
    (43) term -> . exp_factor
    (44) exp_factor -> . factor EXP exp_factor
    (45) exp_factor -> . factor
    (46) factor -> . MINUS factor_1
    (47) factor -> . PLUS factor_1
    (48) factor -> . NOT factor_1
    (49) factor -> . factor_1
    (50) factor_1 -> . ID
    (51) factor_1 -> . tens_id
    (52) factor_1 -> . tens
    (53) factor_1 -> . func_call
    (54) factor_1 -> . const
    (55) factor_1 -> . L_PAREN expr R_PAREN
    (12) tens_id -> . ID tens_id_1
    (9) tens -> . L_BRACKET expr tens_1
    (60) func_call -> . ID L_PAREN func_call_1
    (5) const -> . STRING_V
    (6) const -> . BOOL_V
    (7) const -> . FLOAT_V
    (8) const -> . INT_V
    MINUS           shift and go to state 45
    PLUS            shift and go to state 46
    NOT             shift and go to state 50
    ID              shift and go to state 51
    L_PAREN         shift and go to state 56
    L_BRACKET       shift and go to state 57
    STRING_V        shift and go to state 58
    BOOL_V          shift and go to state 59
    FLOAT_V         shift and go to state 60
    INT_V           shift and go to state 61

    expr                           shift and go to state 170
    t_expr                         shift and go to state 41
    g_expr                         shift and go to state 42
    m_expr                         shift and go to state 43
    term                           shift and go to state 44
    exp_factor                     shift and go to state 47
    factor                         shift and go to state 48
    factor_1                       shift and go to state 49
    tens_id                        shift and go to state 52
    tens                           shift and go to state 53
    func_call                      shift and go to state 54
    const                          shift and go to state 55

state 160

    (75) while_loop -> WHILE L_PAREN expr R_PAREN . block
    (15) block -> . ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    L_BRACE         reduce using rule 114 (empty -> .)

    block                          shift and go to state 171
    ignored_newlines               shift and go to state 120
    empty                          shift and go to state 3

state 161

    (80) simple_if -> IF L_PAREN expr R_PAREN . block
    (15) block -> . ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    L_BRACE         reduce using rule 114 (empty -> .)

    block                          shift and go to state 172
    ignored_newlines               shift and go to state 120
    empty                          shift and go to state 3

state 162

    (13) tens_id_1 -> L_BRACKET expr R_BRACKET . tens_id_1
    (14) tens_id_1 -> L_BRACKET expr R_BRACKET .
    (13) tens_id_1 -> . L_BRACKET expr R_BRACKET tens_id_1
    (14) tens_id_1 -> . L_BRACKET expr R_BRACKET
    EXP             reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    MOD             reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    DIV             reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    MULT            reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    MINUS           reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    PLUS            reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    LEQT            reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    GEQT            reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    LT              reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    GT              reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    NOT_EQ          reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    EQ              reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    AND             reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    OR              reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    NEWLINE         reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    SEMICOLON       reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    $end            reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    R_PAREN         reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    COMMA           reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    R_BRACKET       reduce using rule 14 (tens_id_1 -> L_BRACKET expr R_BRACKET .)
    L_BRACKET       shift and go to state 101

    tens_id_1                      shift and go to state 173

state 163

    (10) tens_1 -> COMMA expr . tens_1
    (10) tens_1 -> . COMMA expr tens_1
    (11) tens_1 -> . R_BRACKET
    COMMA           shift and go to state 137
    R_BRACKET       shift and go to state 138

    tens_1                         shift and go to state 174

state 164

    (61) func_call_1 -> expr COMMA func_call_1 .
    NEWLINE         reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    SEMICOLON       reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    $end            reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    EXP             reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    MOD             reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    DIV             reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    MULT            reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    MINUS           reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    PLUS            reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    LEQT            reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    GEQT            reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    LT              reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    GT              reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    NOT_EQ          reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    EQ              reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    AND             reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    OR              reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    R_PAREN         reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    COMMA           reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)
    R_BRACKET       reduce using rule 61 (func_call_1 -> expr COMMA func_call_1 .)


state 165

    (91) func_params_1 -> ID COLON . const_type COMMA func_params_1
    (92) func_params_1 -> ID COLON . const_type
    (18) const_type -> . GPU_BOOL_T
    (19) const_type -> . GPU_FLOAT_T
    (20) const_type -> . GPU_INT_T
    (21) const_type -> . BOOL_T
    (22) const_type -> . STRING_T
    (23) const_type -> . FLOAT_T
    (24) const_type -> . INT_T
    GPU_BOOL_T      shift and go to state 150
    GPU_FLOAT_T     shift and go to state 151
    GPU_INT_T       shift and go to state 152
    BOOL_T          shift and go to state 153
    STRING_T        shift and go to state 154
    FLOAT_T         shift and go to state 155
    INT_T           shift and go to state 156

    const_type                     shift and go to state 175

state 166

    (88) func -> LET ID L_PAREN func_params R_PAREN . COLON func_type block
    COLON           shift and go to state 176


state 167

    (73) var_id_1 -> L_BRACKET INT_V R_BRACKET . var_id_1
    (74) var_id_1 -> L_BRACKET INT_V R_BRACKET .
    (73) var_id_1 -> . L_BRACKET INT_V R_BRACKET var_id_1
    (74) var_id_1 -> . L_BRACKET INT_V R_BRACKET
    COLON           reduce using rule 74 (var_id_1 -> L_BRACKET INT_V R_BRACKET .)
    L_BRACKET       shift and go to state 114

    var_id_1                       shift and go to state 177

state 168

    (82) simple_else_if -> ELSE_IF L_PAREN expr R_PAREN . block complex_else_if
    (15) block -> . ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    L_BRACE         reduce using rule 114 (empty -> .)

    block                          shift and go to state 178
    ignored_newlines               shift and go to state 120
    empty                          shift and go to state 3

state 169

    (15) block -> ignored_newlines L_BRACE ignored_newlines . block_1 R_BRACE ignored_newlines
    (16) block_1 -> . empty
    (17) block_1 -> . statement block_1
    (114) empty -> .
    (96) statement -> . block_statements
    (97) statement -> . statements eos
    (106) block_statements -> . func
    (107) block_statements -> . cond
    (108) block_statements -> . for_loop
    (109) block_statements -> . while_loop
    (98) statements -> . ret
    (99) statements -> . func_call
    (100) statements -> . write_file
    (101) statements -> . read_file
    (102) statements -> . print_rule
    (103) statements -> . read_line
    (104) statements -> . assign
    (105) statements -> . var
    (88) func -> . LET ID L_PAREN func_params R_PAREN COLON func_type block
    (77) cond -> . cond_if_else_if
    (78) cond -> . cond_if_else
    (79) cond -> . simple_if
    (76) for_loop -> . FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block
    (75) while_loop -> . WHILE L_PAREN expr R_PAREN block
    (95) ret -> . RETURN expr
    (60) func_call -> . ID L_PAREN func_call_1
    (59) write_file -> . WRITE_FILE L_PAREN func_call_1
    (58) read_file -> . READ_FILE L_PAREN R_PAREN
    (57) print_rule -> . PRINT L_PAREN func_call_1
    (56) read_line -> . READ_LINE L_PAREN R_PAREN
    (64) assign -> . ID ASSIG expr
    (65) var -> . LET var_1
    (87) cond_if_else_if -> . simple_if simple_else_if
    (86) cond_if_else -> . simple_if simple_else
    (80) simple_if -> . IF L_PAREN expr R_PAREN block
    R_BRACE         reduce using rule 114 (empty -> .)
    LET             shift and go to state 183
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    RETURN          shift and go to state 18
    ID              shift and go to state 19
    WRITE_FILE      shift and go to state 20
    READ_FILE       shift and go to state 21
    PRINT           shift and go to state 22
    READ_LINE       shift and go to state 23
    IF              shift and go to state 34

    block_1                        shift and go to state 179
    empty                          shift and go to state 180
    statement                      shift and go to state 181
    block_statements               shift and go to state 17
    statements                     shift and go to state 182
    func                           shift and go to state 25
    cond                           shift and go to state 26
    for_loop                       shift and go to state 27
    while_loop                     shift and go to state 28
    ret                            shift and go to state 9
    func_call                      shift and go to state 10
    write_file                     shift and go to state 11
    read_file                      shift and go to state 12
    print_rule                     shift and go to state 13
    read_line                      shift and go to state 14
    assign                         shift and go to state 15
    var                            shift and go to state 16
    cond_if_else_if                shift and go to state 29
    cond_if_else                   shift and go to state 30
    simple_if                      shift and go to state 31

state 170

    (76) for_loop -> FOR L_PAREN var SEMICOLON expr . SEMICOLON assign R_PAREN block
    SEMICOLON       shift and go to state 184


state 171

    (75) while_loop -> WHILE L_PAREN expr R_PAREN block .
    RETURN          reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    ID              reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    WRITE_FILE      reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    READ_FILE       reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    PRINT           reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    READ_LINE       reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    LET             reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    FOR             reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    WHILE           reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    IF              reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    $end            reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)
    R_BRACE         reduce using rule 75 (while_loop -> WHILE L_PAREN expr R_PAREN block .)


state 172

    (80) simple_if -> IF L_PAREN expr R_PAREN block .
    ELSE_IF         reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    ELSE            reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    RETURN          reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    ID              reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    WRITE_FILE      reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    READ_FILE       reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    PRINT           reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    READ_LINE       reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    LET             reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    FOR             reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    WHILE           reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    IF              reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    $end            reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)
    R_BRACE         reduce using rule 80 (simple_if -> IF L_PAREN expr R_PAREN block .)


state 173

    (13) tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .
    EXP             reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    MOD             reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    DIV             reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    MULT            reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    MINUS           reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    PLUS            reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    LEQT            reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    GEQT            reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    LT              reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    GT              reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    NOT_EQ          reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    EQ              reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    AND             reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    OR              reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    NEWLINE         reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    SEMICOLON       reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    $end            reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    R_PAREN         reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    COMMA           reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)
    R_BRACKET       reduce using rule 13 (tens_id_1 -> L_BRACKET expr R_BRACKET tens_id_1 .)


state 174

    (10) tens_1 -> COMMA expr tens_1 .
    EXP             reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    MOD             reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    DIV             reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    MULT            reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    MINUS           reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    PLUS            reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    LEQT            reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    GEQT            reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    LT              reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    GT              reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    NOT_EQ          reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    EQ              reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    AND             reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    OR              reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    NEWLINE         reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    SEMICOLON       reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    $end            reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    R_PAREN         reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    COMMA           reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)
    R_BRACKET       reduce using rule 10 (tens_1 -> COMMA expr tens_1 .)


state 175

    (91) func_params_1 -> ID COLON const_type . COMMA func_params_1
    (92) func_params_1 -> ID COLON const_type .
    COMMA           shift and go to state 185
    R_PAREN         reduce using rule 92 (func_params_1 -> ID COLON const_type .)


state 176

    (88) func -> LET ID L_PAREN func_params R_PAREN COLON . func_type block
    (93) func_type -> . VOID
    (94) func_type -> . const_type
    (18) const_type -> . GPU_BOOL_T
    (19) const_type -> . GPU_FLOAT_T
    (20) const_type -> . GPU_INT_T
    (21) const_type -> . BOOL_T
    (22) const_type -> . STRING_T
    (23) const_type -> . FLOAT_T
    (24) const_type -> . INT_T
    VOID            shift and go to state 187
    GPU_BOOL_T      shift and go to state 150
    GPU_FLOAT_T     shift and go to state 151
    GPU_INT_T       shift and go to state 152
    BOOL_T          shift and go to state 153
    STRING_T        shift and go to state 154
    FLOAT_T         shift and go to state 155
    INT_T           shift and go to state 156

    func_type                      shift and go to state 186
    const_type                     shift and go to state 188

state 177

    (73) var_id_1 -> L_BRACKET INT_V R_BRACKET var_id_1 .
    COLON           reduce using rule 73 (var_id_1 -> L_BRACKET INT_V R_BRACKET var_id_1 .)


state 178

    (82) simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block . complex_else_if
    (83) complex_else_if -> . simple_else
    (84) complex_else_if -> . empty
    (85) complex_else_if -> . simple_else_if
    (81) simple_else -> . ELSE block
    (114) empty -> .
    (82) simple_else_if -> . ELSE_IF L_PAREN expr R_PAREN block complex_else_if
    ELSE            shift and go to state 76
    RETURN          reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WRITE_FILE      reduce using rule 114 (empty -> .)
    READ_FILE       reduce using rule 114 (empty -> .)
    PRINT           reduce using rule 114 (empty -> .)
    READ_LINE       reduce using rule 114 (empty -> .)
    LET             reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)
    R_BRACE         reduce using rule 114 (empty -> .)
    ELSE_IF         shift and go to state 75

    complex_else_if                shift and go to state 189
    simple_else                    shift and go to state 190
    empty                          shift and go to state 191
    simple_else_if                 shift and go to state 192

state 179

    (15) block -> ignored_newlines L_BRACE ignored_newlines block_1 . R_BRACE ignored_newlines
    R_BRACE         shift and go to state 193


state 180

    (16) block_1 -> empty .
    R_BRACE         reduce using rule 16 (block_1 -> empty .)


state 181

    (17) block_1 -> statement . block_1
    (16) block_1 -> . empty
    (17) block_1 -> . statement block_1
    (114) empty -> .
    (96) statement -> . block_statements
    (97) statement -> . statements eos
    (106) block_statements -> . func
    (107) block_statements -> . cond
    (108) block_statements -> . for_loop
    (109) block_statements -> . while_loop
    (98) statements -> . ret
    (99) statements -> . func_call
    (100) statements -> . write_file
    (101) statements -> . read_file
    (102) statements -> . print_rule
    (103) statements -> . read_line
    (104) statements -> . assign
    (105) statements -> . var
    (88) func -> . LET ID L_PAREN func_params R_PAREN COLON func_type block
    (77) cond -> . cond_if_else_if
    (78) cond -> . cond_if_else
    (79) cond -> . simple_if
    (76) for_loop -> . FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block
    (75) while_loop -> . WHILE L_PAREN expr R_PAREN block
    (95) ret -> . RETURN expr
    (60) func_call -> . ID L_PAREN func_call_1
    (59) write_file -> . WRITE_FILE L_PAREN func_call_1
    (58) read_file -> . READ_FILE L_PAREN R_PAREN
    (57) print_rule -> . PRINT L_PAREN func_call_1
    (56) read_line -> . READ_LINE L_PAREN R_PAREN
    (64) assign -> . ID ASSIG expr
    (65) var -> . LET var_1
    (87) cond_if_else_if -> . simple_if simple_else_if
    (86) cond_if_else -> . simple_if simple_else
    (80) simple_if -> . IF L_PAREN expr R_PAREN block
    R_BRACE         reduce using rule 114 (empty -> .)
    LET             shift and go to state 183
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    RETURN          shift and go to state 18
    ID              shift and go to state 19
    WRITE_FILE      shift and go to state 20
    READ_FILE       shift and go to state 21
    PRINT           shift and go to state 22
    READ_LINE       shift and go to state 23
    IF              shift and go to state 34

    statement                      shift and go to state 181
    block_1                        shift and go to state 194
    empty                          shift and go to state 180
    block_statements               shift and go to state 17
    statements                     shift and go to state 182
    func                           shift and go to state 25
    cond                           shift and go to state 26
    for_loop                       shift and go to state 27
    while_loop                     shift and go to state 28
    ret                            shift and go to state 9
    func_call                      shift and go to state 10
    write_file                     shift and go to state 11
    read_file                      shift and go to state 12
    print_rule                     shift and go to state 13
    read_line                      shift and go to state 14
    assign                         shift and go to state 15
    var                            shift and go to state 16
    cond_if_else_if                shift and go to state 29
    cond_if_else                   shift and go to state 30
    simple_if                      shift and go to state 31

state 182

    (97) statement -> statements . eos
    (110) eos -> . NEWLINE ignored_newlines
    (111) eos -> . SEMICOLON ignored_newlines
    NEWLINE         shift and go to state 37
    SEMICOLON       shift and go to state 38

    eos                            shift and go to state 36

state 183

    (88) func -> LET . ID L_PAREN func_params R_PAREN COLON func_type block
    (65) var -> LET . var_1
    (66) var_1 -> . var_2 COMMA var_1
    (67) var_1 -> . var_2
    (68) var_2 -> . var_3 ASSIG expr
    (69) var_2 -> . var_3
    (70) var_3 -> . var_id COLON const_type
    (71) var_id -> . ID var_id_1
    (72) var_id -> . ID
    ID              shift and go to state 69

    var_1                          shift and go to state 68
    var_2                          shift and go to state 70
    var_3                          shift and go to state 71
    var_id                         shift and go to state 72

state 184

    (76) for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON . assign R_PAREN block
    (64) assign -> . ID ASSIG expr
    ID              shift and go to state 196

    assign                         shift and go to state 195

state 185

    (91) func_params_1 -> ID COLON const_type COMMA . func_params_1
    (91) func_params_1 -> . ID COLON const_type COMMA func_params_1
    (92) func_params_1 -> . ID COLON const_type
    ID              shift and go to state 141

    func_params_1                  shift and go to state 197

state 186

    (88) func -> LET ID L_PAREN func_params R_PAREN COLON func_type . block
    (15) block -> . ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    L_BRACE         reduce using rule 114 (empty -> .)

    block                          shift and go to state 198
    ignored_newlines               shift and go to state 120
    empty                          shift and go to state 3

state 187

    (93) func_type -> VOID .
    NEWLINE         reduce using rule 93 (func_type -> VOID .)
    L_BRACE         reduce using rule 93 (func_type -> VOID .)


state 188

    (94) func_type -> const_type .
    NEWLINE         reduce using rule 94 (func_type -> const_type .)
    L_BRACE         reduce using rule 94 (func_type -> const_type .)


state 189

    (82) simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .
    RETURN          reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    ID              reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    WRITE_FILE      reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    READ_FILE       reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    PRINT           reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    READ_LINE       reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    LET             reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    FOR             reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    WHILE           reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    IF              reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    $end            reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)
    R_BRACE         reduce using rule 82 (simple_else_if -> ELSE_IF L_PAREN expr R_PAREN block complex_else_if .)


state 190

    (83) complex_else_if -> simple_else .
    RETURN          reduce using rule 83 (complex_else_if -> simple_else .)
    ID              reduce using rule 83 (complex_else_if -> simple_else .)
    WRITE_FILE      reduce using rule 83 (complex_else_if -> simple_else .)
    READ_FILE       reduce using rule 83 (complex_else_if -> simple_else .)
    PRINT           reduce using rule 83 (complex_else_if -> simple_else .)
    READ_LINE       reduce using rule 83 (complex_else_if -> simple_else .)
    LET             reduce using rule 83 (complex_else_if -> simple_else .)
    FOR             reduce using rule 83 (complex_else_if -> simple_else .)
    WHILE           reduce using rule 83 (complex_else_if -> simple_else .)
    IF              reduce using rule 83 (complex_else_if -> simple_else .)
    $end            reduce using rule 83 (complex_else_if -> simple_else .)
    R_BRACE         reduce using rule 83 (complex_else_if -> simple_else .)


state 191

    (84) complex_else_if -> empty .
    RETURN          reduce using rule 84 (complex_else_if -> empty .)
    ID              reduce using rule 84 (complex_else_if -> empty .)
    WRITE_FILE      reduce using rule 84 (complex_else_if -> empty .)
    READ_FILE       reduce using rule 84 (complex_else_if -> empty .)
    PRINT           reduce using rule 84 (complex_else_if -> empty .)
    READ_LINE       reduce using rule 84 (complex_else_if -> empty .)
    LET             reduce using rule 84 (complex_else_if -> empty .)
    FOR             reduce using rule 84 (complex_else_if -> empty .)
    WHILE           reduce using rule 84 (complex_else_if -> empty .)
    IF              reduce using rule 84 (complex_else_if -> empty .)
    $end            reduce using rule 84 (complex_else_if -> empty .)
    R_BRACE         reduce using rule 84 (complex_else_if -> empty .)


state 192

    (85) complex_else_if -> simple_else_if .
    RETURN          reduce using rule 85 (complex_else_if -> simple_else_if .)
    ID              reduce using rule 85 (complex_else_if -> simple_else_if .)
    WRITE_FILE      reduce using rule 85 (complex_else_if -> simple_else_if .)
    READ_FILE       reduce using rule 85 (complex_else_if -> simple_else_if .)
    PRINT           reduce using rule 85 (complex_else_if -> simple_else_if .)
    READ_LINE       reduce using rule 85 (complex_else_if -> simple_else_if .)
    LET             reduce using rule 85 (complex_else_if -> simple_else_if .)
    FOR             reduce using rule 85 (complex_else_if -> simple_else_if .)
    WHILE           reduce using rule 85 (complex_else_if -> simple_else_if .)
    IF              reduce using rule 85 (complex_else_if -> simple_else_if .)
    $end            reduce using rule 85 (complex_else_if -> simple_else_if .)
    R_BRACE         reduce using rule 85 (complex_else_if -> simple_else_if .)


state 193

    (15) block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE . ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    RETURN          reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WRITE_FILE      reduce using rule 114 (empty -> .)
    READ_FILE       reduce using rule 114 (empty -> .)
    PRINT           reduce using rule 114 (empty -> .)
    READ_LINE       reduce using rule 114 (empty -> .)
    LET             reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)
    R_BRACE         reduce using rule 114 (empty -> .)
    ELSE_IF         reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)

    ignored_newlines               shift and go to state 199
    empty                          shift and go to state 3

state 194

    (17) block_1 -> statement block_1 .
    R_BRACE         reduce using rule 17 (block_1 -> statement block_1 .)


state 195

    (76) for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign . R_PAREN block
    R_PAREN         shift and go to state 200


state 196

    (64) assign -> ID . ASSIG expr
    ASSIG           shift and go to state 63


state 197

    (91) func_params_1 -> ID COLON const_type COMMA func_params_1 .
    R_PAREN         reduce using rule 91 (func_params_1 -> ID COLON const_type COMMA func_params_1 .)


state 198

    (88) func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .
    RETURN          reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    ID              reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    WRITE_FILE      reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    READ_FILE       reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    PRINT           reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    READ_LINE       reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    LET             reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    FOR             reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    WHILE           reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    IF              reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    $end            reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)
    R_BRACE         reduce using rule 88 (func -> LET ID L_PAREN func_params R_PAREN COLON func_type block .)


state 199

    (15) block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .
    RETURN          reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    ID              reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    WRITE_FILE      reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    READ_FILE       reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    PRINT           reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    READ_LINE       reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    LET             reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    FOR             reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    WHILE           reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    IF              reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    $end            reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    R_BRACE         reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    ELSE_IF         reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)
    ELSE            reduce using rule 15 (block -> ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines .)


state 200

    (76) for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN . block
    (15) block -> . ignored_newlines L_BRACE ignored_newlines block_1 R_BRACE ignored_newlines
    (112) ignored_newlines -> . empty
    (113) ignored_newlines -> . NEWLINE ignored_newlines
    (114) empty -> .
    NEWLINE         shift and go to state 4
    L_BRACE         reduce using rule 114 (empty -> .)

    block                          shift and go to state 201
    ignored_newlines               shift and go to state 120
    empty                          shift and go to state 3

state 201

    (76) for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .
    RETURN          reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    ID              reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    WRITE_FILE      reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    READ_FILE       reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    PRINT           reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    READ_LINE       reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    LET             reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    FOR             reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    WHILE           reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    IF              reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    $end            reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
    R_BRACE         reduce using rule 76 (for_loop -> FOR L_PAREN var SEMICOLON expr SEMICOLON assign R_PAREN block .)
