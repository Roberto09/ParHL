# CPU variable declaration
let x : int := 5
let y : float := 2.91
let z : bool
z := True
let q : string := "parhl string!"


# GPU variable declaration
let g_x : gpu_int := 8
let g_y : gpu_float := 3.14, g_z : gpu_bool := False


# Tensor declaration (CPU and GPU)
let tens_x[2][3] : int := [[1, 2, 3], [4, 5, 6]]
let tens_g_y[2][2] : gpu_float := [[1.5, 2.1], [3.14, 2.91]]
let tens_g_z[2] : gpu_bool := [True, False]
let tens_q[1][2] : string := [["parhl", "tensor"]]


# Operations in primitives
x := 10

let x1 : int := x + 3 * 5 ^ 2 / 2.5 + y + (x%2)
let g_x2 : gpu_float := x + 3 * 5 ^ 2 / 2.5 + g_y + (x%2)
let x3 : bool := (not (z and False) or True) = False and True
let g_x4 : gpu_bool := x1 >= g_x2 and x3 or (x1 < g_x2 and g_x <> x)
let x5 : string := q + " concatenated";

print(x, "\n")
print(x1, "\n")
print(g_x2, "\n")
print(x3, "\n")
print(g_x4, "\n")
print(x5, "\n")

# Operations in tensors
tens_g_y[0][0] := 3

let tens_g_y1[2][2] : gpu_float := tens_g_y ^ 3
let tens_g_y2[2][3] : gpu_float := tens_g_y1 ** [[1.0, 2.3, 3.2], [-5.1, 2.8, 3.9]]
let tens_y3[2][1] : int := tens_x ** [[1],[2],[3]] + [[1000], [2000]]

print(g_y, "\n")
print(tens_g_y1, "\n")
print(tens_g_y2, "\n")
print(tens_y3, "\n")

## Broadcasting
let tens_y4[2][2] : int := [1000, 2000] + [[1, 2], [3, 4]]
let tens_y5[2][2] : bool := tens_y4 <= 100000
let tens_y6[2][2]: gpu_bool := tens_g_z or [[True, False], [False, True]]

print(tens_y4, "\n")
print(tens_y5, "\n")
print(tens_y6, "\n")

# Conditionals
if(True){
    print("We got True", "\n")
}
else {
    print("We got False", "\n")
}

if(tens_y6[0][0]){
    print("tens_y6[0][0] is True", "\n")
}
else if((not tens_y6[0][0] and False) or True){
    print("not tens_y6[0][0] and False) or True \t evaluated to: True", "\n")
}


# Loops
let i : int := 0
while(i < 5){
    # do whatever you want here
    print("i is worth: ", i, "\n")
    i := i+1
}

for(let i[2][2] : gpu_int := [[0, 1], [2, 3]]; i <= 50; i := i ** i){
    # do whatever you want here
    print("i is worth:", i, "\n")
}

for(let i : int := 0; i < 2; i := i+1){
    for(let j : int := 0; j < 2; j := j+1){
        print("tens_g_y1[", i, "]","[", j, "] =", tens_g_y1[i][j], "\n")
    }
}


# Functions
let gpu_fibo (n : int) : void {
    let nested_func(n : int) : gpu_float {
        print("inner scope n =", n, "\n")
        return 3.14
    }
    print(nested_func(123), "\n")
    let fib_init[1][2] : gpu_int := [[1, 0]]
    let fib_matr[2][2] : gpu_int := [[1, 1], [1, 0]] 
    let res[1][2] : gpu_int := fib_init ** (fib_matr ^ n)
    print("fibo(", n, ") = ", res[0][1], "\n")
}
gpu_fibo(10)

let plain_old_rec_fibo (n : int) : int {
    if(n <= 1){
        return 1
    }
    return plain_old_rec_fibo(n-1) + plain_old_rec_fibo(n-2)
}
let fibo_10 : int := plain_old_rec_fibo(10)
print("plain_old_rec_fibo(", 10, ")=", fibo_10, "\n")


# Special IO functions
print("doing a print", "\n")

let tens_readline[2][2] : float := read_line(float[2][2])
print(tens_readline, "\n")

let prim_readline : int := read_line(int)
print(prim_readline, "\n")

write_file("my_output_file", tens_readline)

let tens_readfile[3][3] : gpu_bool := read_file(bool[3][3], "my_input_file")
print(tens_readfile, "\n")